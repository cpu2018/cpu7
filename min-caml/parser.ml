type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | ADHOC
  | AST
  | SLASH
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | FLOOR
  | SQRT
  | FTOI
  | ITOF
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | FUN
  | ARROW
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | SFTL
  | SFTR

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
let getpos () = {
		   ls = (Parsing.symbol_start_pos ()).Lexing.pos_lnum;
		   le = (Parsing.symbol_end_pos ()).Lexing.pos_lnum;
           chs = (Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol;
           che = (Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol}
# 57 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* ADHOC *);
  264 (* AST *);
  265 (* SLASH *);
  266 (* MINUS_DOT *);
  267 (* PLUS_DOT *);
  268 (* AST_DOT *);
  269 (* SLASH_DOT *);
  270 (* FLOOR *);
  271 (* SQRT *);
  272 (* FTOI *);
  273 (* ITOF *);
  274 (* EQUAL *);
  275 (* LESS_GREATER *);
  276 (* LESS_EQUAL *);
  277 (* GREATER_EQUAL *);
  278 (* LESS *);
  279 (* GREATER *);
  280 (* IF *);
  281 (* THEN *);
  282 (* ELSE *);
  284 (* LET *);
  285 (* IN *);
  286 (* FUN *);
  287 (* ARROW *);
  288 (* REC *);
  289 (* COMMA *);
  290 (* ARRAY_CREATE *);
  291 (* DOT *);
  292 (* LESS_MINUS *);
  293 (* SEMICOLON *);
  294 (* LPAREN *);
  295 (* RPAREN *);
    0 (* EOF *);
  296 (* SFTL *);
  297 (* SFTR *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  283 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\004\000\008\000\008\000\
\009\000\009\000\009\000\003\000\003\000\003\000\005\000\005\000\
\006\000\006\000\007\000\007\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\006\000\002\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\002\000\006\000\004\000\005\000\002\000\001\000\008\000\
\007\000\003\000\004\000\003\000\001\000\004\000\002\000\001\000\
\005\000\003\000\001\000\001\000\002\000\001\000\002\000\001\000\
\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\045\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\051\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\060\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\094\000\021\000\036\000\067\000\062\000\022\000\069\000\103\000\
\037\000"

let yysindex = "\007\000\
\171\255\000\000\000\000\000\000\000\000\000\000\171\255\171\255\
\171\255\171\255\171\255\171\255\171\255\171\255\000\000\253\254\
\243\254\086\255\131\255\139\004\042\255\234\254\249\254\249\254\
\249\254\139\004\139\004\249\254\249\254\205\255\250\254\242\254\
\001\255\243\254\255\254\000\255\003\255\083\255\000\000\173\003\
\171\255\171\255\171\255\171\255\171\255\171\255\171\255\171\255\
\171\255\171\255\171\255\171\255\171\255\171\255\171\255\171\255\
\171\255\171\255\171\255\248\254\004\255\086\255\171\255\171\255\
\171\255\005\255\009\255\007\255\227\254\000\000\000\000\013\255\
\171\255\255\254\027\255\004\255\000\000\232\003\232\003\139\004\
\249\254\249\254\232\003\232\003\249\254\249\254\087\255\087\255\
\087\255\087\255\087\255\087\255\250\004\176\004\139\004\139\004\
\171\255\004\255\250\004\210\003\247\003\005\255\050\255\171\255\
\043\255\047\255\058\255\255\254\139\004\000\000\171\255\171\255\
\028\004\171\255\171\255\000\000\171\255\139\004\000\000\000\000\
\171\255\039\255\065\004\046\255\213\004\139\004\139\004\102\004\
\000\000\000\000\171\255\171\255\213\004\139\004"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\120\000\231\000\056\001\097\001\
\134\001\048\000\058\001\171\001\208\001\000\000\000\000\000\000\
\000\000\230\254\000\000\000\000\059\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\001\000\000\000\000\000\000\042\000\157\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\194\000\000\000\121\002\151\002\099\001\
\245\001\025\002\186\002\211\002\060\002\096\002\235\002\003\003\
\025\003\049\003\074\003\096\003\236\000\136\001\173\001\174\002\
\000\000\083\000\111\003\000\000\000\000\073\255\000\000\000\000\
\000\000\000\000\000\000\000\000\244\002\000\000\000\000\015\001\
\000\000\000\000\000\000\000\000\000\000\027\003\000\000\000\000\
\000\000\068\255\000\000\001\000\120\003\113\003\074\255\000\000\
\000\000\000\000\000\000\000\000\136\003\138\003"

let yygindex = "\000\000\
\008\000\241\255\068\000\000\000\000\000\000\000\000\000\002\000\
\223\255"

let yytablesize = 1571
let yytable = "\043\000\
\007\000\072\000\038\000\106\000\051\000\061\000\051\000\001\000\
\020\000\107\000\063\000\065\000\066\000\034\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\076\000\031\000\
\035\000\071\000\040\000\068\000\032\000\097\000\073\000\102\000\
\058\000\059\000\033\000\074\000\035\000\104\000\075\000\105\000\
\110\000\056\000\004\000\005\000\006\000\108\000\098\000\031\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\111\000\095\000\096\000\117\000\015\000\119\000\099\000\100\000\
\101\000\120\000\122\000\121\000\060\000\129\000\061\000\019\000\
\109\000\131\000\055\000\004\000\005\000\006\000\004\000\005\000\
\006\000\052\000\048\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\070\000\046\000\116\000\
\113\000\000\000\000\000\000\000\000\000\015\000\000\000\118\000\
\015\000\000\000\000\000\000\000\000\000\075\000\123\000\008\000\
\019\000\125\000\126\000\019\000\127\000\000\000\058\000\059\000\
\128\000\000\000\003\000\004\000\005\000\006\000\007\000\008\000\
\000\000\000\000\133\000\134\000\009\000\000\000\000\000\000\000\
\010\000\011\000\012\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\038\000\015\000\016\000\000\000\
\017\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\
\019\000\039\000\003\000\004\000\005\000\006\000\007\000\008\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\010\000\011\000\012\000\013\000\000\000\000\000\000\000\000\000\
\000\000\044\000\014\000\000\000\000\000\015\000\016\000\000\000\
\017\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\
\019\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\050\000\051\000\
\052\000\053\000\054\000\055\000\000\000\064\000\039\000\000\000\
\000\000\000\000\000\000\058\000\000\000\056\000\000\000\000\000\
\000\000\057\000\000\000\000\000\058\000\059\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\009\000\000\000\
\000\000\000\000\007\000\007\000\007\000\007\000\007\000\007\000\
\000\000\007\000\007\000\007\000\000\000\007\000\000\000\000\000\
\000\000\007\000\000\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\056\000\056\000\056\000\000\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\010\000\
\000\000\032\000\000\000\056\000\056\000\056\000\056\000\056\000\
\056\000\000\000\056\000\056\000\056\000\000\000\056\000\000\000\
\031\000\031\000\056\000\000\000\031\000\000\000\056\000\056\000\
\056\000\056\000\056\000\055\000\055\000\055\000\031\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\011\000\000\000\012\000\000\000\055\000\055\000\055\000\055\000\
\055\000\055\000\000\000\055\000\055\000\055\000\000\000\055\000\
\000\000\000\000\000\000\055\000\000\000\000\000\000\000\055\000\
\055\000\055\000\055\000\055\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\026\000\000\000\042\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\000\000\
\008\000\008\000\000\000\000\000\008\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\008\000\000\000\008\000\008\000\
\008\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\033\000\000\000\017\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\038\000\038\000\000\000\
\000\000\038\000\000\000\000\000\000\000\038\000\000\000\000\000\
\000\000\038\000\000\000\038\000\038\000\038\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\034\000\
\000\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\
\044\000\000\000\044\000\044\000\000\000\000\000\044\000\000\000\
\000\000\000\000\044\000\000\000\000\000\000\000\044\000\000\000\
\044\000\044\000\044\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\015\000\000\000\000\000\000\000\
\039\000\039\000\039\000\039\000\039\000\039\000\000\000\039\000\
\039\000\000\000\000\000\039\000\058\000\058\000\000\000\000\000\
\058\000\000\000\000\000\039\000\058\000\039\000\039\000\039\000\
\058\000\000\000\058\000\000\000\009\000\009\000\009\000\009\000\
\016\000\009\000\009\000\009\000\000\000\000\000\000\000\000\000\
\009\000\009\000\009\000\009\000\009\000\009\000\000\000\009\000\
\009\000\000\000\000\000\009\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\009\000\000\000\009\000\009\000\009\000\
\000\000\000\000\000\000\029\000\010\000\010\000\000\000\010\000\
\010\000\010\000\010\000\010\000\010\000\000\000\000\000\000\000\
\000\000\010\000\010\000\010\000\010\000\010\000\010\000\000\000\
\010\000\010\000\032\000\032\000\010\000\000\000\032\000\000\000\
\010\000\000\000\000\000\000\000\010\000\000\000\010\000\030\000\
\032\000\000\000\000\000\000\000\000\000\011\000\011\000\000\000\
\011\000\011\000\011\000\011\000\011\000\011\000\000\000\000\000\
\000\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\
\014\000\011\000\011\000\012\000\012\000\011\000\000\000\012\000\
\000\000\011\000\000\000\000\000\000\000\011\000\000\000\011\000\
\000\000\012\000\026\000\026\000\000\000\026\000\026\000\026\000\
\026\000\026\000\026\000\000\000\000\000\000\000\013\000\026\000\
\026\000\026\000\026\000\026\000\026\000\000\000\026\000\026\000\
\042\000\042\000\026\000\000\000\042\000\000\000\026\000\000\000\
\000\000\000\000\026\000\000\000\026\000\018\000\042\000\033\000\
\033\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
\000\000\028\000\000\000\000\000\033\000\033\000\033\000\033\000\
\033\000\033\000\000\000\033\000\033\000\017\000\017\000\033\000\
\000\000\017\000\000\000\033\000\000\000\000\000\000\000\033\000\
\000\000\033\000\027\000\017\000\034\000\034\000\000\000\034\000\
\034\000\034\000\034\000\034\000\034\000\000\000\000\000\000\000\
\000\000\034\000\034\000\034\000\034\000\034\000\034\000\000\000\
\034\000\034\000\019\000\000\000\034\000\000\000\000\000\000\000\
\034\000\000\000\000\000\036\000\034\000\000\000\034\000\000\000\
\000\000\015\000\015\000\000\000\015\000\015\000\015\000\015\000\
\015\000\015\000\020\000\000\000\000\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\000\000\015\000\015\000\000\000\
\000\000\015\000\000\000\000\000\000\000\015\000\000\000\000\000\
\023\000\015\000\037\000\015\000\000\000\016\000\016\000\000\000\
\016\000\016\000\016\000\016\000\016\000\016\000\000\000\000\000\
\000\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\
\024\000\016\000\016\000\000\000\000\000\016\000\000\000\000\000\
\000\000\016\000\000\000\000\000\000\000\016\000\000\000\016\000\
\029\000\029\000\000\000\029\000\029\000\029\000\029\000\029\000\
\029\000\021\000\000\000\000\000\000\000\029\000\029\000\029\000\
\029\000\029\000\029\000\000\000\029\000\029\000\000\000\000\000\
\029\000\000\000\000\000\000\000\029\000\000\000\000\000\022\000\
\029\000\000\000\029\000\000\000\030\000\030\000\000\000\030\000\
\030\000\030\000\030\000\030\000\030\000\000\000\057\000\000\000\
\035\000\030\000\030\000\030\000\030\000\030\000\030\000\025\000\
\030\000\030\000\000\000\000\000\030\000\014\000\014\000\000\000\
\030\000\000\000\014\000\014\000\030\000\000\000\030\000\041\000\
\000\000\040\000\014\000\014\000\014\000\014\000\014\000\014\000\
\000\000\014\000\014\000\000\000\000\000\014\000\000\000\000\000\
\000\000\014\000\000\000\013\000\013\000\014\000\000\000\014\000\
\013\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\013\000\013\000\013\000\013\000\013\000\000\000\013\000\
\013\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\013\000\000\000\013\000\028\000\028\000\
\000\000\000\000\000\000\028\000\028\000\000\000\018\000\018\000\
\000\000\000\000\018\000\028\000\028\000\028\000\028\000\028\000\
\028\000\000\000\028\000\028\000\018\000\000\000\028\000\027\000\
\027\000\000\000\028\000\000\000\027\000\027\000\028\000\000\000\
\028\000\000\000\000\000\000\000\027\000\027\000\027\000\027\000\
\027\000\027\000\000\000\027\000\027\000\000\000\000\000\027\000\
\000\000\000\000\000\000\027\000\000\000\000\000\000\000\027\000\
\000\000\027\000\000\000\000\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\000\000\000\000\019\000\
\000\000\000\000\000\000\019\000\036\000\036\000\000\000\019\000\
\036\000\019\000\000\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\036\000\020\000\020\000\000\000\000\000\020\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\020\000\
\000\000\020\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\023\000\037\000\037\000\023\000\000\000\037\000\
\000\000\023\000\000\000\000\000\000\000\023\000\000\000\023\000\
\000\000\037\000\024\000\024\000\024\000\024\000\024\000\024\000\
\000\000\024\000\024\000\000\000\000\000\024\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\024\000\000\000\024\000\
\000\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\000\000\021\000\021\000\000\000\000\000\021\000\000\000\
\000\000\000\000\021\000\000\000\000\000\000\000\021\000\000\000\
\021\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\
\022\000\022\000\000\000\000\000\022\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\022\000\000\000\022\000\057\000\
\057\000\035\000\035\000\057\000\000\000\035\000\000\000\057\000\
\025\000\025\000\000\000\057\000\025\000\057\000\000\000\035\000\
\000\000\000\000\000\000\000\000\025\000\000\000\025\000\000\000\
\041\000\041\000\040\000\040\000\041\000\000\000\040\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\041\000\000\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\050\000\051\000\
\052\000\053\000\054\000\055\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\057\000\000\000\077\000\058\000\059\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\000\000\
\000\000\000\000\000\000\050\000\051\000\052\000\053\000\054\000\
\055\000\000\000\000\000\114\000\000\000\000\000\043\000\044\000\
\045\000\000\000\056\000\048\000\049\000\000\000\057\000\000\000\
\000\000\058\000\059\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\000\000\000\000\000\000\000\000\
\050\000\051\000\052\000\053\000\054\000\055\000\000\000\058\000\
\059\000\000\000\000\000\115\000\000\000\000\000\000\000\056\000\
\000\000\000\000\000\000\057\000\000\000\000\000\058\000\059\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\000\000\000\000\000\000\000\000\050\000\051\000\052\000\
\053\000\054\000\055\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\056\000\000\000\000\000\000\000\
\057\000\000\000\124\000\058\000\059\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\000\000\000\000\
\000\000\000\000\050\000\051\000\052\000\053\000\054\000\055\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\000\000\000\000\000\000\057\000\000\000\130\000\
\058\000\059\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\000\000\000\000\000\000\000\000\050\000\
\051\000\052\000\053\000\054\000\055\000\000\000\000\000\000\000\
\000\000\000\000\132\000\000\000\000\000\000\000\056\000\000\000\
\000\000\000\000\057\000\000\000\000\000\058\000\059\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\000\000\000\000\000\000\000\000\050\000\051\000\052\000\053\000\
\054\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\057\000\
\000\000\000\000\058\000\059\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\000\000\000\000\000\000\
\000\000\050\000\051\000\052\000\053\000\054\000\055\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\000\000\000\000\000\000\000\112\000\000\000\000\000\058\000\
\059\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\050\000\051\000\
\052\000\053\000\054\000\055\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\000\000\000\000\000\000\000\000\058\000\059\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\000\000\
\000\000\000\000\000\000\050\000\051\000\052\000\053\000\054\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\058\000\059\000"

let yycheck = "\007\001\
\000\000\035\000\018\000\033\001\031\001\021\000\033\001\001\000\
\001\000\039\001\033\001\018\001\027\001\027\001\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\014\000\038\000\027\001\
\038\001\027\001\019\000\027\001\032\001\038\001\031\001\027\001\
\040\001\041\001\038\001\033\001\038\001\029\001\035\001\033\001\
\074\000\000\000\001\001\002\001\003\001\033\001\062\000\000\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\038\001\058\000\059\000\018\001\027\001\027\001\063\000\064\000\
\065\000\027\001\108\000\018\001\035\001\039\001\000\000\038\001\
\073\000\036\001\000\000\001\001\002\001\003\001\001\001\002\001\
\003\001\031\001\018\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\033\001\034\000\029\001\102\000\
\097\000\255\255\255\255\255\255\255\255\027\001\255\255\104\000\
\027\001\255\255\255\255\255\255\255\255\035\001\111\000\000\000\
\038\001\114\000\115\000\038\001\117\000\255\255\040\001\041\001\
\121\000\255\255\000\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\131\000\132\000\010\001\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\000\000\027\001\028\001\255\255\
\030\001\255\255\255\255\255\255\034\001\255\255\255\255\255\255\
\038\001\039\001\000\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\010\001\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\000\000\024\001\255\255\255\255\027\001\028\001\255\255\
\030\001\255\255\255\255\255\255\034\001\255\255\255\255\255\255\
\038\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\000\000\255\255\
\255\255\255\255\255\255\000\000\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\255\255\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\000\000\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\027\001\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\035\001\255\255\037\001\038\001\039\001\
\040\001\041\001\001\001\002\001\003\001\255\255\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\000\000\
\255\255\000\000\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\027\001\255\255\029\001\255\255\
\025\001\026\001\033\001\255\255\029\001\255\255\037\001\038\001\
\039\001\040\001\041\001\001\001\002\001\003\001\039\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\000\000\255\255\000\000\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\027\001\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\000\000\255\255\000\000\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\000\000\255\255\000\000\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\040\001\041\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\000\000\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\255\255\255\255\255\255\037\001\255\255\
\039\001\040\001\041\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\000\000\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\029\001\025\001\026\001\255\255\255\255\
\029\001\255\255\255\255\037\001\033\001\039\001\040\001\041\001\
\037\001\255\255\039\001\255\255\006\001\007\001\008\001\009\001\
\000\000\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\255\255\255\255\037\001\255\255\039\001\040\001\041\001\
\255\255\255\255\255\255\000\000\005\001\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\025\001\026\001\029\001\255\255\029\001\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\000\000\
\039\001\255\255\255\255\255\255\255\255\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\000\000\025\001\026\001\025\001\026\001\029\001\255\255\029\001\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\255\255\039\001\005\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\000\000\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\025\001\026\001\029\001\255\255\029\001\255\255\033\001\255\255\
\255\255\255\255\037\001\255\255\039\001\000\000\039\001\005\001\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\000\000\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\025\001\026\001\029\001\
\255\255\029\001\255\255\033\001\255\255\255\255\255\255\037\001\
\255\255\039\001\000\000\039\001\005\001\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\000\000\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\255\255\000\000\037\001\255\255\039\001\255\255\
\255\255\005\001\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\000\000\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\255\255\
\000\000\037\001\000\000\039\001\255\255\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\000\000\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\005\001\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\000\000\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\255\255\000\000\
\037\001\255\255\039\001\255\255\005\001\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\000\000\255\255\
\000\000\018\001\019\001\020\001\021\001\022\001\023\001\000\000\
\025\001\026\001\255\255\255\255\029\001\005\001\006\001\255\255\
\033\001\255\255\010\001\011\001\037\001\255\255\039\001\000\000\
\255\255\000\000\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\005\001\006\001\037\001\255\255\039\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\255\255\255\255\037\001\255\255\039\001\005\001\006\001\
\255\255\255\255\255\255\010\001\011\001\255\255\025\001\026\001\
\255\255\255\255\029\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\039\001\255\255\029\001\005\001\
\006\001\255\255\033\001\255\255\010\001\011\001\037\001\255\255\
\039\001\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\255\255\255\255\037\001\
\255\255\039\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\025\001\026\001\255\255\037\001\
\029\001\039\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\039\001\025\001\026\001\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\255\255\255\255\037\001\
\255\255\039\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\025\001\026\001\029\001\255\255\029\001\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\255\255\039\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\255\255\255\255\255\255\037\001\255\255\
\039\001\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\025\001\
\026\001\025\001\026\001\029\001\255\255\029\001\255\255\033\001\
\025\001\026\001\255\255\037\001\029\001\039\001\255\255\039\001\
\255\255\255\255\255\255\255\255\037\001\255\255\039\001\255\255\
\025\001\026\001\025\001\026\001\029\001\255\255\029\001\255\255\
\255\255\255\255\255\255\255\255\037\001\255\255\039\001\255\255\
\039\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\040\001\041\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\255\255\255\255\007\001\008\001\
\009\001\255\255\033\001\012\001\013\001\255\255\037\001\255\255\
\255\255\040\001\041\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\040\001\
\041\001\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\040\001\041\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\037\001\255\255\039\001\040\001\041\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\040\001\041\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\255\255\255\255\037\001\255\255\255\255\040\001\041\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\040\001\041\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\255\255\040\001\
\041\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\040\001\041\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  ADHOC\000\
  AST\000\
  SLASH\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  FLOOR\000\
  SQRT\000\
  FTOI\000\
  ITOF\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  FUN\000\
  ARROW\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  SFTL\000\
  SFTR\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 80 "parser.mly"
    ( _2 )
# 645 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
    ( Unit (getpos ()) )
# 651 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 84 "parser.mly"
    ( Bool(_1, getpos ()) )
# 658 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 86 "parser.mly"
    ( Int(_1, getpos ()) )
# 665 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 88 "parser.mly"
    ( Float(_1, getpos ()) )
# 672 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 90 "parser.mly"
    ( Var(_1, getpos ()) )
# 679 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 92 "parser.mly"
    ( Get(_1, _4) )
# 687 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 96 "parser.mly"
    ( _1 )
# 694 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 98 "parser.mly"
 ( _1 )
# 701 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 101 "parser.mly"
    ( Not(_2) )
# 708 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
    ( match _2 with
    | Float(f, p) -> Float(-.f, p) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 717 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
 ( AdHoc(_1, _3) )
# 725 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
    ( Add(_1, _3) )
# 733 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( Sub(_1, _3) )
# 741 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
 ( Mul(_1, _3) )
# 749 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
 ( Div(_1, _3) )
# 757 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
 ( ShiftIL(_1, _3) )
# 765 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 120 "parser.mly"
 ( ShiftIR(_1, _3) )
# 773 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 122 "parser.mly"
    ( Eq(_1, _3) )
# 781 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 124 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 789 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
    ( Not(LE(_3, _1)) )
# 797 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
    ( Not(LE(_1, _3)) )
# 805 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    ( LE(_1, _3) )
# 813 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 132 "parser.mly"
    ( LE(_3, _1) )
# 821 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 135 "parser.mly"
    ( If(_2, _4, _6) )
# 830 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 138 "parser.mly"
    ( FNeg(_2) )
# 837 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 140 "parser.mly"
    ( FAdd(_1, _3) )
# 845 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 142 "parser.mly"
    ( FSub(_1, _3) )
# 853 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 144 "parser.mly"
    ( FMul(_1, _3) )
# 861 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 146 "parser.mly"
    ( FDiv(_1, _3) )
# 869 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 148 "parser.mly"
 ( Floor(_2) )
# 876 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 150 "parser.mly"
 ( Sqrt(_2) )
# 883 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 152 "parser.mly"
 ( FtoI(_2) )
# 890 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 154 "parser.mly"
 ( ItoF(_2) )
# 897 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 157 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 906 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'funargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 160 "parser.mly"
 ( Fun(_2, _4, getpos ()) )
# 914 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 163 "parser.mly"
    ( LetRec(_3, _5) )
# 922 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 166 "parser.mly"
    ( App(_1, _2) )
# 930 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 169 "parser.mly"
    ( Tuple(_1) )
# 937 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 171 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 946 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 173 "parser.mly"
    ( Put(_1, _4, _7) )
# 955 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 175 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 963 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 177 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 971 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 180 "parser.mly"
    ( Array(_2, _3) )
# 979 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near line %d-%d characters %d-%d"
		   ((Parsing.symbol_start_pos ()).Lexing.pos_lnum)
		   ((Parsing.symbol_end_pos ()).Lexing.pos_lnum)
           ((Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol)
           ((Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol)) )
# 990 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 191 "parser.mly"
    ( { name = (addtyp _1, getpos ()); args = _2; body = _4 } )
# 999 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 195 "parser.mly"
    ( addtyp _1 :: _2 )
# 1007 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 197 "parser.mly"
    ( [addtyp _1] )
# 1014 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'argtuple) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'argtuple) in
    Obj.repr(
# 201 "parser.mly"
 ( _2 @ _4 )
# 1022 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argtuple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 203 "parser.mly"
 ( _1 @ _3 )
# 1030 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 205 "parser.mly"
 ( [addtyp _1] )
# 1037 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 209 "parser.mly"
 ( _1 )
# 1044 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funargs) in
    Obj.repr(
# 211 "parser.mly"
 ( addtyp _1 :: _2 )
# 1052 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 213 "parser.mly"
 ( [addtyp _1] )
# 1059 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 218 "parser.mly"
    ( _1 @ [_2] )
# 1067 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 221 "parser.mly"
    ( [_1] )
# 1074 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 225 "parser.mly"
    ( _1 @ [_3] )
# 1082 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 227 "parser.mly"
    ( [_1; _3] )
# 1090 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 231 "parser.mly"
    ( _1 @ [addtyp _3] )
# 1098 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 233 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 1106 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
