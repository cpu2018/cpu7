type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | ADHOC
  | AST
  | SLASH
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | FUN
  | ARROW
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | SFTL
  | SFTR

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
let getpos () = {
		   ls = (Parsing.symbol_start_pos ()).Lexing.pos_lnum;
		   le = (Parsing.symbol_end_pos ()).Lexing.pos_lnum;
           chs = (Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol;
           che = (Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol}
# 53 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* ADHOC *);
  264 (* AST *);
  265 (* SLASH *);
  266 (* MINUS_DOT *);
  267 (* PLUS_DOT *);
  268 (* AST_DOT *);
  269 (* SLASH_DOT *);
  270 (* EQUAL *);
  271 (* LESS_GREATER *);
  272 (* LESS_EQUAL *);
  273 (* GREATER_EQUAL *);
  274 (* LESS *);
  275 (* GREATER *);
  276 (* IF *);
  277 (* THEN *);
  278 (* ELSE *);
  280 (* LET *);
  281 (* IN *);
  282 (* FUN *);
  283 (* ARROW *);
  284 (* REC *);
  285 (* COMMA *);
  286 (* ARRAY_CREATE *);
  287 (* DOT *);
  288 (* LESS_MINUS *);
  289 (* SEMICOLON *);
  290 (* LPAREN *);
  291 (* RPAREN *);
    0 (* EOF *);
  292 (* SFTL *);
  293 (* SFTR *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  279 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\004\000\008\000\008\000\009\000\009\000\009\000\003\000\
\003\000\003\000\005\000\005\000\006\000\006\000\007\000\007\000\
\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\006\000\002\000\003\000\003\000\003\000\003\000\006\000\004\000\
\005\000\002\000\001\000\008\000\007\000\003\000\004\000\003\000\
\001\000\004\000\002\000\001\000\005\000\003\000\001\000\001\000\
\002\000\001\000\002\000\001\000\003\000\003\000\003\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\041\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\047\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\056\000\055\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\086\000\017\000\028\000\059\000\054\000\018\000\061\000\095\000\
\029\000"

let yysindex = "\002\000\
\080\255\000\000\000\000\000\000\000\000\000\000\080\255\080\255\
\080\255\080\255\000\000\071\255\246\254\126\255\006\255\238\003\
\064\255\239\254\253\254\253\254\253\254\172\255\005\255\004\255\
\012\255\246\254\054\255\010\255\014\255\090\255\000\000\212\255\
\080\255\080\255\080\255\080\255\080\255\080\255\080\255\080\255\
\080\255\080\255\080\255\080\255\080\255\080\255\080\255\080\255\
\080\255\080\255\080\255\011\255\031\255\126\255\080\255\080\255\
\080\255\048\255\047\255\045\255\252\254\000\000\000\000\050\255\
\080\255\054\255\042\255\031\255\000\000\139\255\139\255\238\003\
\253\254\253\254\139\255\139\255\253\254\253\254\158\255\158\255\
\158\255\158\255\158\255\158\255\081\004\015\004\238\003\238\003\
\080\255\031\255\081\004\073\003\106\003\048\255\072\255\080\255\
\066\255\073\255\083\255\054\255\238\003\000\000\080\255\080\255\
\139\003\080\255\080\255\000\000\080\255\238\003\000\000\000\000\
\080\255\076\255\172\003\069\255\048\004\238\003\238\003\205\003\
\000\000\000\000\080\255\080\255\048\004\238\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\107\000\
\108\000\207\000\021\001\058\001\095\001\000\000\000\000\000\000\
\000\000\244\254\000\000\000\000\085\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\239\000\000\000\000\000\000\000\038\000\141\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\174\000\000\000\003\002\041\002\044\000\
\128\001\161\001\078\002\115\002\194\001\227\001\148\002\181\002\
\214\002\247\002\015\003\037\003\244\000\214\000\233\001\047\002\
\000\000\075\000\042\003\000\000\000\000\101\255\000\000\000\000\
\000\000\000\000\000\000\000\000\084\002\000\000\000\000\239\000\
\000\000\000\000\000\000\000\000\000\000\121\002\000\000\000\000\
\000\000\088\255\000\000\001\000\027\001\154\002\093\255\000\000\
\000\000\000\000\000\000\000\000\064\001\187\002"

let yygindex = "\000\000\
\013\000\244\255\097\000\000\000\000\000\000\000\000\000\031\000\
\229\255"

let yytablesize = 1398
let yytable = "\064\000\
\007\000\030\000\001\000\035\000\053\000\003\000\004\000\005\000\
\006\000\007\000\008\000\055\000\026\000\016\000\047\000\009\000\
\047\000\068\000\057\000\019\000\020\000\021\000\022\000\027\000\
\098\000\010\000\058\000\032\000\011\000\012\000\099\000\013\000\
\050\000\051\000\060\000\014\000\065\000\052\000\102\000\015\000\
\031\000\090\000\066\000\012\000\089\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\067\000\087\000\088\000\
\004\000\005\000\006\000\091\000\092\000\093\000\094\000\096\000\
\114\000\097\000\051\000\103\000\063\000\101\000\100\000\003\000\
\004\000\005\000\006\000\007\000\008\000\109\000\011\000\027\000\
\111\000\009\000\004\000\005\000\006\000\023\000\052\000\112\000\
\113\000\015\000\024\000\010\000\123\000\105\000\011\000\012\000\
\025\000\013\000\057\000\008\000\110\000\014\000\121\000\048\000\
\011\000\015\000\044\000\115\000\046\000\042\000\117\000\118\000\
\067\000\119\000\062\000\015\000\108\000\120\000\004\000\005\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\125\000\
\126\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000\
\000\000\035\000\036\000\037\000\011\000\000\000\040\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\000\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\000\000\000\000\040\000\050\000\051\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\056\000\050\000\051\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\049\000\000\000\035\000\050\000\
\051\000\000\000\000\000\000\000\000\000\038\000\000\000\000\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
\048\000\000\000\000\000\054\000\049\000\000\000\069\000\050\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\010\000\007\000\007\000\007\000\
\000\000\007\000\025\000\000\000\000\000\007\000\000\000\007\000\
\000\000\007\000\007\000\007\000\007\000\007\000\052\000\052\000\
\052\000\000\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\011\000\052\000\052\000\052\000\000\000\052\000\037\000\
\012\000\012\000\052\000\000\000\012\000\000\000\052\000\052\000\
\052\000\052\000\052\000\051\000\051\000\051\000\012\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\026\000\051\000\
\051\000\051\000\000\000\051\000\000\000\000\000\000\000\051\000\
\000\000\000\000\000\000\051\000\051\000\051\000\051\000\051\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\015\000\
\008\000\008\000\000\000\000\000\008\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\008\000\000\000\008\000\008\000\
\008\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\016\000\034\000\034\000\000\000\000\000\034\000\000\000\000\000\
\000\000\034\000\000\000\000\000\000\000\034\000\000\000\034\000\
\034\000\034\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\029\000\040\000\040\000\000\000\000\000\040\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\040\000\000\000\
\040\000\040\000\040\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\030\000\035\000\035\000\000\000\000\000\035\000\
\017\000\000\000\038\000\038\000\000\000\000\000\038\000\035\000\
\000\000\035\000\035\000\035\000\009\000\009\000\009\000\009\000\
\038\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\014\000\009\000\009\000\000\000\000\000\009\000\
\054\000\054\000\000\000\009\000\054\000\000\000\000\000\009\000\
\054\000\009\000\009\000\009\000\054\000\000\000\054\000\000\000\
\000\000\010\000\010\000\000\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\013\000\010\000\010\000\000\000\000\000\010\000\018\000\025\000\
\025\000\010\000\000\000\025\000\000\000\010\000\000\000\010\000\
\000\000\000\000\000\000\025\000\000\000\025\000\011\000\011\000\
\000\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\028\000\011\000\011\000\
\000\000\000\000\011\000\032\000\037\000\037\000\011\000\000\000\
\037\000\000\000\011\000\000\000\011\000\000\000\000\000\000\000\
\037\000\000\000\037\000\026\000\026\000\000\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\027\000\026\000\026\000\000\000\000\000\026\000\
\033\000\000\000\000\000\026\000\000\000\000\000\000\000\026\000\
\000\000\026\000\000\000\000\000\015\000\015\000\000\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\019\000\015\000\015\000\000\000\000\000\
\015\000\031\000\000\000\000\000\015\000\000\000\000\000\000\000\
\015\000\000\000\015\000\000\000\000\000\016\000\016\000\000\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\020\000\016\000\016\000\000\000\
\000\000\016\000\036\000\000\000\000\000\016\000\000\000\000\000\
\000\000\016\000\000\000\016\000\000\000\000\000\029\000\029\000\
\000\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\023\000\029\000\029\000\
\000\000\000\000\029\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\029\000\000\000\029\000\000\000\000\000\030\000\
\030\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\024\000\030\000\
\030\000\000\000\000\000\030\000\000\000\017\000\017\000\030\000\
\000\000\017\000\000\000\030\000\000\000\030\000\000\000\014\000\
\014\000\000\000\000\000\017\000\014\000\014\000\021\000\000\000\
\014\000\014\000\014\000\014\000\014\000\014\000\000\000\014\000\
\014\000\000\000\000\000\014\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\014\000\022\000\014\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\013\000\013\000\000\000\
\000\000\000\000\013\000\013\000\000\000\000\000\013\000\013\000\
\013\000\013\000\013\000\013\000\000\000\013\000\013\000\000\000\
\000\000\013\000\000\000\018\000\018\000\013\000\000\000\018\000\
\000\000\013\000\000\000\013\000\000\000\000\000\000\000\000\000\
\000\000\018\000\028\000\028\000\000\000\000\000\000\000\028\000\
\028\000\000\000\000\000\028\000\028\000\028\000\028\000\028\000\
\028\000\000\000\028\000\028\000\000\000\000\000\028\000\000\000\
\032\000\032\000\028\000\000\000\032\000\000\000\028\000\000\000\
\028\000\000\000\000\000\000\000\000\000\000\000\032\000\027\000\
\027\000\000\000\000\000\000\000\027\000\027\000\000\000\000\000\
\027\000\027\000\027\000\027\000\027\000\027\000\000\000\027\000\
\027\000\000\000\000\000\027\000\000\000\033\000\033\000\027\000\
\000\000\033\000\000\000\027\000\000\000\027\000\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\000\000\019\000\019\000\019\000\019\000\019\000\019\000\000\000\
\019\000\019\000\000\000\000\000\019\000\000\000\031\000\031\000\
\019\000\000\000\031\000\000\000\019\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
\000\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
\000\000\020\000\020\000\000\000\000\000\020\000\000\000\036\000\
\036\000\020\000\000\000\036\000\000\000\020\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\036\000\000\000\000\000\
\000\000\000\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\000\000\023\000\023\000\000\000\000\000\023\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\023\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\024\000\024\000\024\000\
\024\000\024\000\000\000\024\000\024\000\000\000\000\000\024\000\
\000\000\000\000\000\000\024\000\000\000\000\000\000\000\024\000\
\000\000\024\000\000\000\000\000\021\000\021\000\021\000\021\000\
\021\000\021\000\000\000\021\000\021\000\000\000\000\000\021\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\021\000\
\000\000\021\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\022\000\022\000\000\000\000\000\022\000\053\000\053\000\
\000\000\022\000\053\000\000\000\000\000\022\000\053\000\022\000\
\000\000\000\000\053\000\000\000\053\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\106\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\049\000\000\000\000\000\050\000\051\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\
\000\000\000\000\107\000\000\000\000\000\000\000\048\000\000\000\
\000\000\000\000\049\000\000\000\000\000\050\000\051\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\000\000\000\000\000\000\049\000\000\000\116\000\050\000\051\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\049\000\000\000\122\000\050\000\
\051\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\000\000\000\000\000\000\000\000\000\000\124\000\000\000\000\000\
\000\000\048\000\000\000\000\000\000\000\049\000\000\000\000\000\
\050\000\051\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\000\000\000\000\000\000\049\000\000\000\
\000\000\050\000\051\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\104\000\
\000\000\000\000\050\000\051\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000\051\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\051\000"

let yycheck = "\027\000\
\000\000\014\000\001\000\007\001\017\000\000\001\001\001\002\001\
\003\001\004\001\005\001\029\001\023\001\001\000\027\001\010\001\
\029\001\030\000\014\001\007\000\008\000\009\000\010\000\034\001\
\029\001\020\001\023\001\015\000\023\001\024\001\035\001\026\001\
\036\001\037\001\023\001\030\001\027\001\000\000\066\000\034\001\
\035\001\054\000\029\001\000\000\034\001\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\031\001\050\000\051\000\
\001\001\002\001\003\001\055\000\056\000\057\000\023\001\025\001\
\100\000\029\001\000\000\034\001\023\001\065\000\029\001\000\001\
\001\001\002\001\003\001\004\001\005\001\014\001\023\001\034\001\
\023\001\010\001\001\001\002\001\003\001\023\001\031\001\023\001\
\014\001\034\001\028\001\020\001\032\001\089\000\023\001\024\001\
\034\001\026\001\000\000\000\000\096\000\030\001\035\001\027\001\
\023\001\034\001\014\001\103\000\029\001\025\001\106\000\107\000\
\031\001\109\000\026\000\034\001\094\000\113\000\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\255\255\123\000\
\124\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\007\001\008\001\009\001\023\001\255\255\012\001\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\255\255\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\000\000\036\001\037\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\000\000\036\001\
\037\001\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\029\001\255\255\255\255\000\000\033\001\255\255\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\021\001\022\001\023\001\
\255\255\025\001\000\000\255\255\255\255\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\001\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\000\000\021\001\022\001\023\001\255\255\025\001\000\000\
\021\001\022\001\029\001\255\255\025\001\255\255\033\001\034\001\
\035\001\036\001\037\001\001\001\002\001\003\001\035\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\000\000\021\001\
\022\001\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\000\000\
\021\001\022\001\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\035\001\036\001\
\037\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\000\000\021\001\022\001\255\255\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\035\001\
\036\001\037\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\000\000\021\001\022\001\255\255\255\255\025\001\255\255\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\000\000\021\001\022\001\255\255\255\255\025\001\
\000\000\255\255\021\001\022\001\255\255\255\255\025\001\033\001\
\255\255\035\001\036\001\037\001\006\001\007\001\008\001\009\001\
\035\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\000\000\021\001\022\001\255\255\255\255\025\001\
\021\001\022\001\255\255\029\001\025\001\255\255\255\255\033\001\
\029\001\035\001\036\001\037\001\033\001\255\255\035\001\255\255\
\255\255\005\001\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\000\000\021\001\022\001\255\255\255\255\025\001\000\000\021\001\
\022\001\029\001\255\255\025\001\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\033\001\255\255\035\001\005\001\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\000\000\021\001\022\001\
\255\255\255\255\025\001\000\000\021\001\022\001\029\001\255\255\
\025\001\255\255\033\001\255\255\035\001\255\255\255\255\255\255\
\033\001\255\255\035\001\005\001\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\000\000\021\001\022\001\255\255\255\255\025\001\
\000\000\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\035\001\255\255\255\255\005\001\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\000\000\021\001\022\001\255\255\255\255\
\025\001\000\000\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\035\001\255\255\255\255\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\021\001\022\001\255\255\
\255\255\025\001\000\000\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\005\001\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\000\000\021\001\022\001\
\255\255\255\255\025\001\255\255\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\255\255\035\001\255\255\255\255\005\001\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\000\000\021\001\
\022\001\255\255\255\255\025\001\255\255\021\001\022\001\029\001\
\255\255\025\001\255\255\033\001\255\255\035\001\255\255\005\001\
\006\001\255\255\255\255\035\001\010\001\011\001\000\000\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\255\255\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\000\000\035\001\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\005\001\006\001\255\255\
\255\255\255\255\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\255\255\
\255\255\025\001\255\255\021\001\022\001\029\001\255\255\025\001\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\255\255\
\255\255\035\001\005\001\006\001\255\255\255\255\255\255\010\001\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\255\255\025\001\255\255\
\021\001\022\001\029\001\255\255\025\001\255\255\033\001\255\255\
\035\001\255\255\255\255\255\255\255\255\255\255\035\001\005\001\
\006\001\255\255\255\255\255\255\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\255\255\255\255\025\001\255\255\021\001\022\001\029\001\
\255\255\025\001\255\255\033\001\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\035\001\255\255\255\255\255\255\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\255\255\255\255\025\001\255\255\021\001\022\001\
\029\001\255\255\025\001\255\255\033\001\255\255\035\001\255\255\
\255\255\255\255\255\255\255\255\035\001\255\255\255\255\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\255\255\255\255\025\001\255\255\021\001\
\022\001\029\001\255\255\025\001\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\255\255\025\001\255\255\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\255\255\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\035\001\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\255\255\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\035\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\255\255\255\255\025\001\021\001\022\001\
\255\255\029\001\025\001\255\255\255\255\033\001\029\001\035\001\
\255\255\255\255\033\001\255\255\035\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\255\255\036\001\037\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\255\255\
\255\255\255\255\025\001\255\255\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\255\255\255\255\036\001\037\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\035\001\036\001\037\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\035\001\036\001\
\037\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\255\255\
\036\001\037\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\255\255\036\001\037\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\255\255\036\001\037\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  ADHOC\000\
  AST\000\
  SLASH\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  FUN\000\
  ARROW\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  SFTL\000\
  SFTR\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 75 "parser.mly"
    ( _2 )
# 586 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
    ( Unit (getpos ()) )
# 592 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 79 "parser.mly"
    ( Bool(_1, getpos ()) )
# 599 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 81 "parser.mly"
    ( Int(_1, getpos ()) )
# 606 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 83 "parser.mly"
    ( Float(_1, getpos ()) )
# 613 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 85 "parser.mly"
    ( Var(_1, getpos ()) )
# 620 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 87 "parser.mly"
    ( Get(_1, _4) )
# 628 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 91 "parser.mly"
    ( _1 )
# 635 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 93 "parser.mly"
 ( _1 )
# 642 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
    ( Not(_2) )
# 649 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 99 "parser.mly"
    ( match _2 with
    | Float(f, p) -> Float(-.f, p) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 658 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 103 "parser.mly"
 ( AdHoc(_1, _3) )
# 666 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 105 "parser.mly"
    ( Add(_1, _3) )
# 674 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 107 "parser.mly"
    ( Sub(_1, _3) )
# 682 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 109 "parser.mly"
 ( Mul(_1, _3) )
# 690 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 111 "parser.mly"
 ( Div(_1, _3) )
# 698 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 113 "parser.mly"
 ( ShiftIL(_1, _3) )
# 706 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 115 "parser.mly"
 ( ShiftIR(_1, _3) )
# 714 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 117 "parser.mly"
    ( Eq(_1, _3) )
# 722 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 119 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 730 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 121 "parser.mly"
    ( Not(LE(_3, _1)) )
# 738 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 123 "parser.mly"
    ( Not(LE(_1, _3)) )
# 746 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 125 "parser.mly"
    ( LE(_1, _3) )
# 754 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 127 "parser.mly"
    ( LE(_3, _1) )
# 762 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    ( If(_2, _4, _6) )
# 771 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 133 "parser.mly"
    ( FNeg(_2) )
# 778 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 135 "parser.mly"
    ( FAdd(_1, _3) )
# 786 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 137 "parser.mly"
    ( FSub(_1, _3) )
# 794 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 139 "parser.mly"
    ( FMul(_1, _3) )
# 802 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 141 "parser.mly"
    ( FDiv(_1, _3) )
# 810 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 144 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 819 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'funargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 147 "parser.mly"
 ( Fun(_2, _4, getpos ()) )
# 827 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 150 "parser.mly"
    ( LetRec(_3, _5) )
# 835 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 153 "parser.mly"
    ( App(_1, _2) )
# 843 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 156 "parser.mly"
    ( Tuple(_1) )
# 850 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 158 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 859 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 160 "parser.mly"
    ( Put(_1, _4, _7) )
# 868 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 162 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 876 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 164 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 884 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 167 "parser.mly"
    ( Array(_2, _3) )
# 892 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 169 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near line %d-%d characters %d-%d"
		   ((Parsing.symbol_start_pos ()).Lexing.pos_lnum)
		   ((Parsing.symbol_end_pos ()).Lexing.pos_lnum)
           ((Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol)
           ((Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol)) )
# 903 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 178 "parser.mly"
    ( { name = (addtyp _1, getpos ()); args = _2; body = _4 } )
# 912 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 182 "parser.mly"
    ( addtyp _1 :: _2 )
# 920 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 184 "parser.mly"
    ( [addtyp _1] )
# 927 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'argtuple) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'argtuple) in
    Obj.repr(
# 188 "parser.mly"
 ( _2 @ _4 )
# 935 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argtuple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 190 "parser.mly"
 ( _1 @ _3 )
# 943 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 192 "parser.mly"
 ( [addtyp _1] )
# 950 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 196 "parser.mly"
 ( _1 )
# 957 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funargs) in
    Obj.repr(
# 198 "parser.mly"
 ( addtyp _1 :: _2 )
# 965 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 200 "parser.mly"
 ( [addtyp _1] )
# 972 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 205 "parser.mly"
    ( _1 @ [_2] )
# 980 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 208 "parser.mly"
    ( [_1] )
# 987 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 212 "parser.mly"
    ( _1 @ [_3] )
# 995 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 214 "parser.mly"
    ( [_1; _3] )
# 1003 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 218 "parser.mly"
    ( _1 @ [addtyp _3] )
# 1011 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 220 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 1019 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
