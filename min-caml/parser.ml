type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | ADHOC
  | AST
  | SLASH
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | FLOOR
  | SQRT
  | FTOI
  | ITOF
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | FUN
  | ARROW
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | SFTL
  | SFTR
  | READINT
  | READFLOAT
  | FABS
  | FSQR
  | FISZERO
  | FISPOS
  | FISNEG
  | FHALF
  | FNEG
  | FLESS

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
let getpos () = {
		   ls = (Parsing.symbol_start_pos ()).Lexing.pos_lnum;
		   le = (Parsing.symbol_end_pos ()).Lexing.pos_lnum;
           chs = (Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol;
           che = (Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol}
# 67 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* ADHOC *);
  264 (* AST *);
  265 (* SLASH *);
  266 (* MINUS_DOT *);
  267 (* PLUS_DOT *);
  268 (* AST_DOT *);
  269 (* SLASH_DOT *);
  270 (* FLOOR *);
  271 (* SQRT *);
  272 (* FTOI *);
  273 (* ITOF *);
  274 (* EQUAL *);
  275 (* LESS_GREATER *);
  276 (* LESS_EQUAL *);
  277 (* GREATER_EQUAL *);
  278 (* LESS *);
  279 (* GREATER *);
  280 (* IF *);
  281 (* THEN *);
  282 (* ELSE *);
  284 (* LET *);
  285 (* IN *);
  286 (* FUN *);
  287 (* ARROW *);
  288 (* REC *);
  289 (* COMMA *);
  290 (* ARRAY_CREATE *);
  291 (* DOT *);
  292 (* LESS_MINUS *);
  293 (* SEMICOLON *);
  294 (* LPAREN *);
  295 (* RPAREN *);
    0 (* EOF *);
  296 (* SFTL *);
  297 (* SFTR *);
  298 (* READINT *);
  299 (* READFLOAT *);
  300 (* FABS *);
  301 (* FSQR *);
  302 (* FISZERO *);
  303 (* FISPOS *);
  304 (* FISNEG *);
  305 (* FHALF *);
  306 (* FNEG *);
  307 (* FLESS *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  283 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\004\000\
\008\000\008\000\009\000\009\000\009\000\003\000\003\000\003\000\
\005\000\005\000\006\000\006\000\007\000\007\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\006\000\002\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\002\000\006\000\004\000\005\000\002\000\001\000\008\000\
\007\000\003\000\004\000\003\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\003\000\002\000\001\000\004\000\
\002\000\001\000\005\000\003\000\001\000\001\000\002\000\001\000\
\002\000\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\055\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\061\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\000\000\000\000\000\000\000\000\000\000\
\057\000\000\000\000\000\070\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\007\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\115\000\031\000\046\000\087\000\082\000\032\000\089\000\124\000\
\047\000"

let yysindex = "\020\000\
\050\005\000\000\000\000\000\000\000\000\000\000\050\005\050\005\
\050\005\050\005\050\005\050\005\050\005\050\005\000\000\247\254\
\238\254\024\255\158\255\024\255\024\255\024\255\024\255\024\255\
\024\255\024\255\024\255\024\255\024\255\063\006\005\255\000\255\
\251\254\251\254\251\254\063\006\063\006\251\254\251\254\205\255\
\006\255\001\255\007\255\238\254\248\254\008\255\011\255\088\255\
\000\000\097\005\003\255\003\255\003\255\003\255\003\255\003\255\
\003\255\003\255\003\255\088\255\050\005\050\005\050\005\050\005\
\050\005\050\005\050\005\050\005\050\005\050\005\050\005\050\005\
\050\005\050\005\050\005\050\005\050\005\050\005\050\005\009\255\
\003\255\024\255\050\005\050\005\050\005\014\255\016\255\013\255\
\254\254\000\000\000\000\052\255\050\005\248\254\055\255\003\255\
\000\000\003\255\139\255\139\255\063\006\251\254\251\254\139\255\
\139\255\251\254\251\254\092\255\092\255\092\255\092\255\092\255\
\092\255\174\006\100\006\063\006\063\006\050\005\003\255\174\006\
\134\005\171\005\014\255\076\255\050\005\068\255\079\255\089\255\
\248\254\063\006\000\000\050\005\050\005\208\005\050\005\050\005\
\000\000\050\005\063\006\000\000\000\000\050\005\069\255\245\005\
\073\255\137\006\063\006\063\006\026\006\000\000\000\000\050\005\
\050\005\137\006\063\006"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\110\000\120\000\111\002\
\185\002\222\002\003\003\048\000\187\002\043\003\084\003\000\000\
\000\000\000\000\000\000\228\254\000\000\000\000\080\255\000\000\
\000\000\000\000\157\000\194\000\231\000\015\001\056\001\097\001\
\134\001\171\001\208\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\148\002\000\000\000\000\000\000\
\042\000\245\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\002\
\000\000\070\002\010\004\035\004\224\002\125\003\162\003\060\004\
\085\004\199\003\236\003\108\004\132\004\155\004\177\004\200\004\
\223\004\236\000\005\003\045\003\086\003\000\000\083\000\239\004\
\000\000\000\000\094\255\000\000\000\000\000\000\000\000\000\000\
\000\000\127\003\000\000\000\000\148\002\000\000\000\000\000\000\
\000\000\000\000\164\003\000\000\000\000\000\000\083\255\000\000\
\001\000\004\005\201\003\084\255\000\000\000\000\000\000\000\000\
\000\000\010\005\254\003"

let yygindex = "\000\000\
\003\000\032\000\073\000\000\000\000\000\000\000\000\000\251\255\
\211\255"

let yytablesize = 2007
let yytable = "\092\000\
\007\000\063\000\061\000\030\000\061\000\004\000\005\000\006\000\
\044\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\091\000\045\000\001\000\050\000\042\000\085\000\
\004\000\005\000\006\000\086\000\043\000\045\000\127\000\015\000\
\083\000\088\000\078\000\079\000\128\000\095\000\093\000\080\000\
\123\000\066\000\019\000\094\000\125\000\126\000\118\000\031\000\
\131\000\048\000\015\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\019\000\081\000\099\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\096\000\
\116\000\117\000\065\000\143\000\129\000\120\000\121\000\122\000\
\004\000\005\000\006\000\098\000\132\000\138\000\140\000\130\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\141\000\142\000\150\000\152\000\071\000\062\000\058\000\
\056\000\119\000\015\000\060\000\090\000\137\000\000\000\008\000\
\134\000\000\000\095\000\000\000\000\000\019\000\000\000\139\000\
\000\000\000\000\000\000\078\000\079\000\000\000\144\000\000\000\
\000\000\146\000\147\000\000\000\148\000\000\000\000\000\000\000\
\149\000\063\000\064\000\065\000\000\000\000\000\068\000\069\000\
\000\000\000\000\154\000\155\000\045\000\003\000\004\000\005\000\
\006\000\007\000\008\000\000\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\010\000\011\000\012\000\013\000\000\000\
\000\000\000\000\078\000\079\000\000\000\014\000\000\000\000\000\
\015\000\016\000\000\000\017\000\000\000\000\000\000\000\018\000\
\000\000\046\000\000\000\019\000\049\000\000\000\000\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\000\000\000\000\000\000\000\000\070\000\071\000\
\072\000\073\000\074\000\075\000\000\000\084\000\047\000\000\000\
\000\000\000\000\000\000\068\000\000\000\076\000\000\000\000\000\
\000\000\077\000\000\000\000\000\078\000\079\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\054\000\000\000\
\000\000\000\000\007\000\007\000\007\000\007\000\007\000\007\000\
\000\000\007\000\007\000\007\000\000\000\007\000\000\000\000\000\
\000\000\007\000\000\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\066\000\066\000\066\000\000\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\048\000\
\000\000\000\000\000\000\066\000\066\000\066\000\066\000\066\000\
\066\000\000\000\066\000\066\000\066\000\000\000\066\000\000\000\
\031\000\031\000\066\000\000\000\031\000\000\000\066\000\066\000\
\066\000\066\000\066\000\065\000\065\000\065\000\031\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\049\000\000\000\000\000\000\000\065\000\065\000\065\000\065\000\
\065\000\065\000\000\000\065\000\065\000\065\000\000\000\065\000\
\000\000\000\000\000\000\065\000\000\000\000\000\000\000\065\000\
\065\000\065\000\065\000\065\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\050\000\000\000\000\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\000\000\
\008\000\008\000\000\000\000\000\008\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\008\000\000\000\008\000\008\000\
\008\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\051\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\000\000\045\000\045\000\000\000\
\000\000\045\000\000\000\000\000\000\000\045\000\000\000\000\000\
\000\000\045\000\000\000\045\000\045\000\045\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\052\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\046\000\046\000\000\000\000\000\046\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\046\000\000\000\
\046\000\046\000\046\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\038\000\000\000\000\000\000\000\
\047\000\047\000\047\000\047\000\047\000\047\000\000\000\047\000\
\047\000\000\000\000\000\047\000\068\000\068\000\000\000\047\000\
\068\000\000\000\000\000\047\000\068\000\047\000\047\000\047\000\
\068\000\000\000\068\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\044\000\000\000\000\000\000\000\
\054\000\054\000\054\000\054\000\054\000\054\000\000\000\054\000\
\054\000\000\000\000\000\054\000\000\000\000\000\000\000\054\000\
\000\000\000\000\000\000\054\000\000\000\054\000\054\000\054\000\
\000\000\000\000\000\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\053\000\000\000\000\000\
\000\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\
\048\000\048\000\000\000\000\000\048\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\048\000\000\000\048\000\048\000\
\048\000\000\000\000\000\000\000\000\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\039\000\000\000\
\000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
\000\000\049\000\049\000\000\000\000\000\049\000\000\000\000\000\
\000\000\049\000\000\000\000\000\000\000\049\000\000\000\049\000\
\049\000\049\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\009\000\000\000\000\000\000\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\050\000\050\000\
\000\000\000\000\050\000\000\000\000\000\000\000\050\000\000\000\
\000\000\000\000\050\000\000\000\050\000\050\000\050\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\010\000\000\000\032\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\000\000\051\000\051\000\000\000\000\000\051\000\
\000\000\000\000\000\000\051\000\000\000\000\000\000\000\051\000\
\000\000\051\000\051\000\051\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\011\000\000\000\012\000\
\000\000\052\000\052\000\052\000\052\000\052\000\052\000\000\000\
\052\000\052\000\000\000\000\000\052\000\000\000\000\000\000\000\
\052\000\000\000\000\000\000\000\052\000\000\000\052\000\052\000\
\052\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\026\000\000\000\042\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\038\000\038\000\000\000\
\000\000\038\000\000\000\000\000\000\000\038\000\000\000\000\000\
\000\000\038\000\000\000\038\000\038\000\038\000\000\000\000\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\033\000\000\000\017\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\000\000\044\000\044\000\000\000\
\000\000\044\000\000\000\000\000\000\000\044\000\000\000\000\000\
\000\000\044\000\000\000\044\000\044\000\044\000\000\000\000\000\
\000\000\000\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\034\000\000\000\018\000\000\000\053\000\
\053\000\053\000\053\000\053\000\053\000\000\000\053\000\053\000\
\000\000\000\000\053\000\000\000\000\000\000\000\053\000\000\000\
\000\000\000\000\053\000\000\000\053\000\053\000\053\000\000\000\
\000\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\015\000\000\000\036\000\000\000\
\039\000\039\000\039\000\039\000\039\000\039\000\000\000\039\000\
\039\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\000\000\039\000\039\000\039\000\
\000\000\009\000\009\000\009\000\009\000\000\000\009\000\009\000\
\009\000\016\000\000\000\037\000\000\000\009\000\009\000\009\000\
\009\000\009\000\009\000\000\000\009\000\009\000\000\000\000\000\
\009\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\009\000\000\000\009\000\009\000\009\000\010\000\010\000\000\000\
\010\000\010\000\010\000\010\000\010\000\010\000\029\000\000\000\
\035\000\000\000\010\000\010\000\010\000\010\000\010\000\010\000\
\000\000\010\000\010\000\032\000\032\000\010\000\000\000\032\000\
\000\000\010\000\000\000\000\000\000\000\010\000\000\000\010\000\
\000\000\032\000\011\000\011\000\000\000\011\000\011\000\011\000\
\011\000\011\000\011\000\030\000\000\000\000\000\000\000\011\000\
\011\000\011\000\011\000\011\000\011\000\000\000\011\000\011\000\
\012\000\012\000\011\000\000\000\012\000\040\000\011\000\000\000\
\000\000\000\000\011\000\000\000\011\000\000\000\012\000\026\000\
\026\000\014\000\026\000\026\000\026\000\026\000\026\000\026\000\
\000\000\000\000\000\000\000\000\026\000\026\000\026\000\026\000\
\026\000\026\000\000\000\026\000\026\000\042\000\042\000\026\000\
\000\000\042\000\013\000\026\000\000\000\000\000\000\000\026\000\
\000\000\026\000\000\000\042\000\000\000\000\000\000\000\033\000\
\033\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
\000\000\000\000\000\000\028\000\033\000\033\000\033\000\033\000\
\033\000\033\000\000\000\033\000\033\000\017\000\017\000\033\000\
\000\000\017\000\000\000\033\000\000\000\000\000\000\000\033\000\
\000\000\033\000\000\000\017\000\027\000\000\000\000\000\000\000\
\034\000\034\000\000\000\034\000\034\000\034\000\034\000\034\000\
\034\000\000\000\000\000\000\000\000\000\034\000\034\000\034\000\
\034\000\034\000\034\000\019\000\034\000\034\000\018\000\018\000\
\034\000\000\000\018\000\000\000\034\000\000\000\000\000\000\000\
\034\000\000\000\034\000\000\000\018\000\000\000\000\000\000\000\
\000\000\015\000\015\000\020\000\015\000\015\000\015\000\015\000\
\015\000\015\000\000\000\000\000\000\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\000\000\015\000\015\000\036\000\
\036\000\015\000\023\000\036\000\000\000\015\000\000\000\000\000\
\000\000\015\000\000\000\015\000\000\000\036\000\016\000\016\000\
\000\000\016\000\016\000\016\000\016\000\016\000\016\000\000\000\
\024\000\000\000\000\000\016\000\016\000\016\000\016\000\016\000\
\016\000\000\000\016\000\016\000\037\000\037\000\016\000\000\000\
\037\000\000\000\016\000\000\000\000\000\000\000\016\000\021\000\
\016\000\000\000\037\000\029\000\029\000\000\000\029\000\029\000\
\029\000\029\000\029\000\029\000\000\000\000\000\000\000\000\000\
\029\000\029\000\029\000\029\000\029\000\029\000\022\000\029\000\
\029\000\035\000\035\000\029\000\000\000\035\000\000\000\029\000\
\000\000\000\000\000\000\029\000\000\000\029\000\067\000\035\000\
\030\000\030\000\000\000\030\000\030\000\030\000\030\000\030\000\
\030\000\000\000\000\000\000\000\000\000\030\000\030\000\030\000\
\030\000\030\000\030\000\025\000\030\000\030\000\000\000\000\000\
\030\000\041\000\000\000\000\000\030\000\000\000\014\000\014\000\
\030\000\000\000\030\000\014\000\014\000\000\000\040\000\040\000\
\000\000\000\000\040\000\014\000\014\000\014\000\014\000\014\000\
\014\000\000\000\014\000\014\000\040\000\000\000\014\000\013\000\
\013\000\000\000\014\000\000\000\013\000\013\000\014\000\000\000\
\014\000\000\000\000\000\000\000\013\000\013\000\013\000\013\000\
\013\000\013\000\000\000\013\000\013\000\000\000\000\000\013\000\
\028\000\028\000\000\000\013\000\000\000\028\000\028\000\013\000\
\000\000\013\000\000\000\000\000\000\000\028\000\028\000\028\000\
\028\000\028\000\028\000\000\000\028\000\028\000\000\000\000\000\
\028\000\027\000\027\000\000\000\028\000\000\000\027\000\027\000\
\028\000\000\000\028\000\000\000\000\000\000\000\027\000\027\000\
\027\000\027\000\027\000\027\000\000\000\027\000\027\000\000\000\
\000\000\027\000\000\000\000\000\000\000\027\000\000\000\000\000\
\000\000\027\000\000\000\027\000\000\000\019\000\019\000\019\000\
\019\000\019\000\019\000\000\000\019\000\019\000\000\000\000\000\
\019\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
\019\000\000\000\019\000\000\000\000\000\020\000\020\000\020\000\
\020\000\020\000\020\000\000\000\020\000\020\000\000\000\000\000\
\020\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
\020\000\000\000\020\000\000\000\023\000\023\000\023\000\023\000\
\023\000\023\000\000\000\023\000\023\000\000\000\000\000\023\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\023\000\
\000\000\023\000\024\000\024\000\024\000\024\000\024\000\024\000\
\000\000\024\000\024\000\000\000\000\000\024\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\024\000\000\000\024\000\
\000\000\021\000\021\000\021\000\021\000\021\000\021\000\000\000\
\021\000\021\000\000\000\000\000\021\000\000\000\000\000\000\000\
\021\000\000\000\000\000\000\000\021\000\000\000\021\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\000\000\022\000\
\022\000\000\000\000\000\022\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\022\000\000\000\022\000\000\000\067\000\
\067\000\000\000\000\000\067\000\000\000\000\000\000\000\067\000\
\000\000\000\000\000\000\067\000\000\000\067\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\025\000\000\000\000\000\
\025\000\000\000\041\000\041\000\000\000\000\000\041\000\000\000\
\025\000\000\000\025\000\000\000\000\000\000\000\041\000\000\000\
\041\000\003\000\004\000\005\000\006\000\007\000\008\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\010\000\
\011\000\012\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\015\000\016\000\000\000\017\000\
\000\000\000\000\000\000\018\000\000\000\000\000\000\000\019\000\
\000\000\000\000\000\000\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\000\000\000\000\000\000\077\000\000\000\097\000\
\078\000\079\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\000\000\000\000\000\000\000\000\070\000\
\071\000\072\000\073\000\074\000\075\000\000\000\000\000\135\000\
\000\000\000\000\000\000\000\000\000\000\000\000\076\000\000\000\
\000\000\000\000\077\000\000\000\000\000\078\000\079\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\000\000\000\000\000\000\000\000\070\000\071\000\072\000\073\000\
\074\000\075\000\000\000\000\000\000\000\000\000\000\000\136\000\
\000\000\000\000\000\000\076\000\000\000\000\000\000\000\077\000\
\000\000\000\000\078\000\079\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\000\000\000\000\000\000\
\000\000\070\000\071\000\072\000\073\000\074\000\075\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\076\000\000\000\000\000\000\000\077\000\000\000\145\000\078\000\
\079\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\000\000\000\000\000\000\000\000\070\000\071\000\
\072\000\073\000\074\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\076\000\000\000\000\000\
\000\000\077\000\000\000\151\000\078\000\079\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\000\000\
\000\000\000\000\000\000\070\000\071\000\072\000\073\000\074\000\
\075\000\000\000\000\000\000\000\000\000\000\000\153\000\000\000\
\000\000\000\000\076\000\000\000\000\000\000\000\077\000\000\000\
\000\000\078\000\079\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\000\000\000\000\000\000\000\000\
\070\000\071\000\072\000\073\000\074\000\075\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\
\000\000\000\000\000\000\077\000\000\000\000\000\078\000\079\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\000\000\000\000\000\000\000\000\070\000\071\000\072\000\
\073\000\074\000\075\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\000\000\000\000\000\000\
\133\000\000\000\000\000\078\000\079\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\074\000\075\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\000\000\000\000\000\000\000\000\000\000\000\000\
\078\000\079\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\000\000\000\000\000\000\000\000\070\000\
\071\000\072\000\073\000\074\000\075\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\078\000\079\000"

let yycheck = "\045\000\
\000\000\007\001\031\001\001\000\033\001\001\001\002\001\003\001\
\027\001\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\027\001\027\001\038\001\001\000\019\000\032\001\018\001\
\001\001\002\001\003\001\027\001\038\001\038\001\033\001\027\001\
\033\001\027\001\040\001\041\001\039\001\035\001\031\001\035\001\
\027\001\000\000\038\001\033\001\029\001\033\001\038\001\000\000\
\094\000\018\000\027\001\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\038\001\031\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\048\000\
\078\000\079\000\000\000\129\000\033\001\083\000\084\000\085\000\
\001\001\002\001\003\001\060\000\038\001\018\001\027\001\093\000\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\027\001\018\001\039\001\036\001\000\000\031\001\018\001\
\029\001\082\000\027\001\033\001\044\000\123\000\255\255\000\000\
\118\000\255\255\035\001\255\255\255\255\038\001\255\255\125\000\
\255\255\255\255\255\255\040\001\041\001\255\255\132\000\255\255\
\255\255\135\000\136\000\255\255\138\000\255\255\255\255\255\255\
\142\000\007\001\008\001\009\001\255\255\255\255\012\001\013\001\
\255\255\255\255\152\000\153\000\000\000\000\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\040\001\041\001\255\255\024\001\255\255\255\255\
\027\001\028\001\255\255\030\001\255\255\255\255\255\255\034\001\
\255\255\000\000\255\255\038\001\039\001\255\255\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\000\000\255\255\
\255\255\255\255\255\255\000\000\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\255\255\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\000\000\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\027\001\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\035\001\255\255\037\001\038\001\039\001\
\040\001\041\001\001\001\002\001\003\001\255\255\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\000\000\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\027\001\255\255\029\001\255\255\
\025\001\026\001\033\001\255\255\029\001\255\255\037\001\038\001\
\039\001\040\001\041\001\001\001\002\001\003\001\039\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\000\000\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\027\001\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\000\000\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\000\000\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\040\001\041\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\000\000\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\255\255\255\255\255\255\037\001\255\255\
\039\001\040\001\041\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\000\000\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\029\001\025\001\026\001\255\255\033\001\
\029\001\255\255\255\255\037\001\033\001\039\001\040\001\041\001\
\037\001\255\255\039\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\000\000\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\255\255\255\255\037\001\255\255\039\001\040\001\041\001\
\255\255\255\255\255\255\255\255\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\000\000\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\000\000\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\040\001\041\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\000\000\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\255\255\255\255\037\001\255\255\039\001\040\001\041\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\000\000\255\255\000\000\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\255\255\255\255\037\001\
\255\255\039\001\040\001\041\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\000\000\255\255\000\000\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\000\000\255\255\000\000\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\040\001\041\001\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\000\000\255\255\000\000\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\000\000\255\255\000\000\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\255\255\255\255\037\001\255\255\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\000\000\255\255\000\000\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\255\255\039\001\040\001\041\001\
\255\255\006\001\007\001\008\001\009\001\255\255\011\001\012\001\
\013\001\000\000\255\255\000\000\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\037\001\255\255\039\001\040\001\041\001\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\000\000\255\255\
\000\000\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\025\001\026\001\029\001\255\255\029\001\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\255\255\039\001\005\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\000\000\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\025\001\026\001\029\001\255\255\029\001\000\000\033\001\255\255\
\255\255\255\255\037\001\255\255\039\001\255\255\039\001\005\001\
\006\001\000\000\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\025\001\026\001\029\001\
\255\255\029\001\000\000\033\001\255\255\255\255\255\255\037\001\
\255\255\039\001\255\255\039\001\255\255\255\255\255\255\005\001\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\000\000\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\025\001\026\001\029\001\
\255\255\029\001\255\255\033\001\255\255\255\255\255\255\037\001\
\255\255\039\001\255\255\039\001\000\000\255\255\255\255\255\255\
\005\001\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\000\000\025\001\026\001\025\001\026\001\
\029\001\255\255\029\001\255\255\033\001\255\255\255\255\255\255\
\037\001\255\255\039\001\255\255\039\001\255\255\255\255\255\255\
\255\255\005\001\006\001\000\000\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\025\001\
\026\001\029\001\000\000\029\001\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\255\255\039\001\005\001\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\000\000\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\025\001\026\001\029\001\255\255\
\029\001\255\255\033\001\255\255\255\255\255\255\037\001\000\000\
\039\001\255\255\039\001\005\001\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\000\000\025\001\
\026\001\025\001\026\001\029\001\255\255\029\001\255\255\033\001\
\255\255\255\255\255\255\037\001\255\255\039\001\000\000\039\001\
\005\001\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\000\000\025\001\026\001\255\255\255\255\
\029\001\000\000\255\255\255\255\033\001\255\255\005\001\006\001\
\037\001\255\255\039\001\010\001\011\001\255\255\025\001\026\001\
\255\255\255\255\029\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\039\001\255\255\029\001\005\001\
\006\001\255\255\033\001\255\255\010\001\011\001\037\001\255\255\
\039\001\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\255\255\029\001\
\005\001\006\001\255\255\033\001\255\255\010\001\011\001\037\001\
\255\255\039\001\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\255\255\
\029\001\005\001\006\001\255\255\033\001\255\255\010\001\011\001\
\037\001\255\255\039\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\037\001\255\255\039\001\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\037\001\255\255\039\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\255\255\255\255\037\001\
\255\255\039\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\255\255\255\255\037\001\255\255\039\001\255\255\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\255\255\255\255\037\001\255\255\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\255\255\255\255\
\029\001\255\255\025\001\026\001\255\255\255\255\029\001\255\255\
\037\001\255\255\039\001\255\255\255\255\255\255\037\001\255\255\
\039\001\000\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\027\001\028\001\255\255\030\001\
\255\255\255\255\255\255\034\001\255\255\255\255\255\255\038\001\
\255\255\255\255\255\255\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\040\001\041\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\255\255\
\255\255\255\255\037\001\255\255\255\255\040\001\041\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\040\001\041\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\040\001\041\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\255\255\255\255\255\255\037\001\255\255\
\255\255\040\001\041\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\040\001\041\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\041\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\041\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  ADHOC\000\
  AST\000\
  SLASH\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  FLOOR\000\
  SQRT\000\
  FTOI\000\
  ITOF\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  FUN\000\
  ARROW\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  SFTL\000\
  SFTR\000\
  READINT\000\
  READFLOAT\000\
  FABS\000\
  FSQR\000\
  FISZERO\000\
  FISPOS\000\
  FISNEG\000\
  FHALF\000\
  FNEG\000\
  FLESS\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 90 "parser.mly"
    ( _2 )
# 794 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
    ( Unit (getpos ()) )
# 800 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 94 "parser.mly"
    ( Bool(_1, getpos ()) )
# 807 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 96 "parser.mly"
    ( Int(_1, getpos ()) )
# 814 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 98 "parser.mly"
    ( Float(_1, getpos ()) )
# 821 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 100 "parser.mly"
    ( Var(_1, getpos ()) )
# 828 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( Get(_1, _4) )
# 836 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 106 "parser.mly"
    ( _1 )
# 843 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
 ( _1 )
# 850 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 111 "parser.mly"
    ( Not(_2) )
# 857 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( match _2 with
    | Float(f, p) -> Float(-.f, p) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 866 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
 ( AdHoc(_1, _3) )
# 874 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 120 "parser.mly"
    ( Add(_1, _3) )
# 882 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 122 "parser.mly"
    ( Sub(_1, _3) )
# 890 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 124 "parser.mly"
 ( Mul(_1, _3) )
# 898 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
 ( Div(_1, _3) )
# 906 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
 ( ShiftIL(_1, _3) )
# 914 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
 ( ShiftIR(_1, _3) )
# 922 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 132 "parser.mly"
    ( Eq(_1, _3) )
# 930 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 134 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 938 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 136 "parser.mly"
    ( Not(LE(_3, _1)) )
# 946 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 138 "parser.mly"
    ( Not(LE(_1, _3)) )
# 954 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 140 "parser.mly"
    ( LE(_1, _3) )
# 962 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 142 "parser.mly"
    ( LE(_3, _1) )
# 970 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 145 "parser.mly"
    ( If(_2, _4, _6) )
# 979 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 148 "parser.mly"
    ( FNeg(_2) )
# 986 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 150 "parser.mly"
    ( FAdd(_1, _3) )
# 994 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 152 "parser.mly"
    ( FSub(_1, _3) )
# 1002 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 154 "parser.mly"
    ( FMul(_1, _3) )
# 1010 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 156 "parser.mly"
    ( FDiv(_1, _3) )
# 1018 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 158 "parser.mly"
 ( Floor(_2) )
# 1025 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 160 "parser.mly"
 ( Sqrt(_2) )
# 1032 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 162 "parser.mly"
 ( FtoI(_2) )
# 1039 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 164 "parser.mly"
 ( ItoF(_2) )
# 1046 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 167 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 1055 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'funargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 170 "parser.mly"
 ( Fun(_2, _4, getpos ()) )
# 1063 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 173 "parser.mly"
    ( LetRec(_3, _5) )
# 1071 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 176 "parser.mly"
    ( App(_1, _2) )
# 1079 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 179 "parser.mly"
    ( Tuple(_1) )
# 1086 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 181 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 1095 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 183 "parser.mly"
    ( Put(_1, _4, _7) )
# 1104 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 185 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 1112 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 187 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 1120 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 190 "parser.mly"
    ( Array(_2, _3) )
# 1128 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 192 "parser.mly"
 ( Read_I _2 )
# 1135 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 194 "parser.mly"
 ( Read_F _2 )
# 1142 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 196 "parser.mly"
 ( If (LE(_2, Float(0.0, getpos ())), FNeg(_2), _2) )
# 1149 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 198 "parser.mly"
 ( Eq (_2, Float(0.0, getpos ())) )
# 1156 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 200 "parser.mly"
 ( Not (LE(_2, Float(0.0, getpos ()))) )
# 1163 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 202 "parser.mly"
 ( Not (LE(Float(0.0, getpos ()), _2)) )
# 1170 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 204 "parser.mly"
 ( FMul (_2, Float(0.5, getpos ())) )
# 1177 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 206 "parser.mly"
 ( FNeg(_2) )
# 1184 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 208 "parser.mly"
 ( Not (LE(_3, _2)) )
# 1192 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 210 "parser.mly"
 ( FMul (_2, _2) )
# 1199 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near line %d-%d characters %d-%d"
		   ((Parsing.symbol_start_pos ()).Lexing.pos_lnum)
		   ((Parsing.symbol_end_pos ()).Lexing.pos_lnum)
           ((Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol)
           ((Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol)) )
# 1210 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 221 "parser.mly"
    ( { name = (addtyp _1, getpos ()); args = _2; body = _4 } )
# 1219 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 225 "parser.mly"
    ( addtyp _1 :: _2 )
# 1227 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 227 "parser.mly"
    ( [addtyp _1] )
# 1234 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'argtuple) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'argtuple) in
    Obj.repr(
# 231 "parser.mly"
 ( _2 @ _4 )
# 1242 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argtuple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 233 "parser.mly"
 ( _1 @ _3 )
# 1250 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 235 "parser.mly"
 ( [addtyp _1] )
# 1257 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 239 "parser.mly"
 ( _1 )
# 1264 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funargs) in
    Obj.repr(
# 241 "parser.mly"
 ( addtyp _1 :: _2 )
# 1272 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 243 "parser.mly"
 ( [addtyp _1] )
# 1279 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 248 "parser.mly"
    ( _1 @ [_2] )
# 1287 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 251 "parser.mly"
    ( [_1] )
# 1294 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 255 "parser.mly"
    ( _1 @ [_3] )
# 1302 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 257 "parser.mly"
    ( [_1; _3] )
# 1310 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 261 "parser.mly"
    ( _1 @ [addtyp _3] )
# 1318 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 263 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 1326 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
