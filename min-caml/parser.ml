type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | ADHOC
  | AST
  | SLASH
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | FLOOR
  | SQRT
  | FTOI
  | ITOF
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | FUN
  | ARROW
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | SFTL
  | SFTR
  | READINT
  | READFLOAT

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
let getpos () = {
		   ls = (Parsing.symbol_start_pos ()).Lexing.pos_lnum;
		   le = (Parsing.symbol_end_pos ()).Lexing.pos_lnum;
           chs = (Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol;
           che = (Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol}
# 59 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* ADHOC *);
  264 (* AST *);
  265 (* SLASH *);
  266 (* MINUS_DOT *);
  267 (* PLUS_DOT *);
  268 (* AST_DOT *);
  269 (* SLASH_DOT *);
  270 (* FLOOR *);
  271 (* SQRT *);
  272 (* FTOI *);
  273 (* ITOF *);
  274 (* EQUAL *);
  275 (* LESS_GREATER *);
  276 (* LESS_EQUAL *);
  277 (* GREATER_EQUAL *);
  278 (* LESS *);
  279 (* GREATER *);
  280 (* IF *);
  281 (* THEN *);
  282 (* ELSE *);
  284 (* LET *);
  285 (* IN *);
  286 (* FUN *);
  287 (* ARROW *);
  288 (* REC *);
  289 (* COMMA *);
  290 (* ARRAY_CREATE *);
  291 (* DOT *);
  292 (* LESS_MINUS *);
  293 (* SEMICOLON *);
  294 (* LPAREN *);
  295 (* RPAREN *);
    0 (* EOF *);
  296 (* SFTL *);
  297 (* SFTR *);
  298 (* READINT *);
  299 (* READFLOAT *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  283 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\004\000\
\008\000\008\000\009\000\009\000\009\000\003\000\003\000\003\000\
\005\000\005\000\006\000\006\000\007\000\007\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\006\000\002\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\002\000\006\000\004\000\005\000\002\000\001\000\008\000\
\007\000\003\000\004\000\003\000\002\000\002\000\001\000\004\000\
\002\000\001\000\005\000\003\000\001\000\001\000\002\000\001\000\
\002\000\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\047\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\053\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\000\000\000\000\000\000\000\000\000\000\049\000\
\000\000\000\000\062\000\061\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\007\000\000\000\000\000\
\000\000\000\000"

let yydgoto = "\002\000\
\098\000\023\000\038\000\071\000\066\000\024\000\073\000\107\000\
\039\000"

let yysindex = "\021\000\
\175\255\000\000\000\000\000\000\000\000\000\000\175\255\175\255\
\175\255\175\255\175\255\175\255\175\255\175\255\000\000\248\254\
\238\254\075\255\131\255\075\255\075\255\247\004\001\255\249\254\
\028\255\028\255\028\255\247\004\247\004\028\255\028\255\244\003\
\007\255\010\255\011\255\238\254\239\254\003\255\012\255\005\255\
\000\000\025\004\009\255\009\255\175\255\175\255\175\255\175\255\
\175\255\175\255\175\255\175\255\175\255\175\255\175\255\175\255\
\175\255\175\255\175\255\175\255\175\255\175\255\175\255\008\255\
\009\255\075\255\175\255\175\255\175\255\020\255\036\255\037\255\
\250\254\000\000\000\000\041\255\175\255\239\254\042\255\009\255\
\000\000\102\255\102\255\247\004\028\255\028\255\102\255\102\255\
\028\255\028\255\086\255\086\255\086\255\086\255\086\255\086\255\
\232\255\028\005\247\004\247\004\175\255\009\255\232\255\062\004\
\099\004\020\255\061\255\175\255\059\255\062\255\070\255\239\254\
\247\004\000\000\175\255\175\255\136\004\175\255\175\255\000\000\
\175\255\247\004\000\000\000\000\175\255\051\255\173\004\064\255\
\065\005\247\004\247\004\210\004\000\000\000\000\175\255\175\255\
\065\005\247\004"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\101\000\120\000\056\001\
\134\001\171\001\208\001\048\000\136\001\245\001\029\002\000\000\
\000\000\000\000\000\000\254\254\000\000\000\000\072\255\000\000\
\000\000\000\000\157\000\194\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\001\000\000\000\000\000\000\
\042\000\231\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\001\
\000\000\215\002\240\002\173\001\070\002\107\002\019\003\044\003\
\148\002\185\002\067\003\094\003\121\003\143\003\165\003\188\003\
\236\000\210\001\247\001\007\002\000\000\083\000\112\002\000\000\
\000\000\088\255\000\000\000\000\000\000\000\000\000\000\000\000\
\031\002\000\000\000\000\097\001\000\000\000\000\000\000\000\000\
\000\000\072\002\000\000\000\000\000\000\074\255\000\000\001\000\
\072\003\150\002\079\255\000\000\000\000\000\000\000\000\000\000\
\209\003\203\002"

let yygindex = "\000\000\
\004\000\064\000\080\000\000\000\000\000\000\000\000\000\011\000\
\219\255"

let yytablesize = 1642
let yytable = "\076\000\
\007\000\004\000\005\000\006\000\022\000\004\000\005\000\006\000\
\036\000\075\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\033\000\037\000\037\000\001\000\042\000\034\000\
\069\000\067\000\110\000\015\000\053\000\035\000\053\000\015\000\
\111\000\077\000\047\000\064\000\070\000\072\000\019\000\079\000\
\114\000\058\000\019\000\079\000\078\000\101\000\106\000\031\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\108\000\099\000\100\000\062\000\063\000\109\000\103\000\104\000\
\105\000\112\000\126\000\004\000\005\000\006\000\121\000\115\000\
\113\000\040\000\057\000\043\000\044\000\123\000\065\000\125\000\
\124\000\133\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\135\000\063\000\015\000\054\000\080\000\
\117\000\050\000\052\000\048\000\047\000\048\000\049\000\122\000\
\019\000\052\000\053\000\074\000\120\000\000\000\127\000\008\000\
\000\000\129\000\130\000\000\000\131\000\062\000\063\000\000\000\
\132\000\102\000\003\000\004\000\005\000\006\000\007\000\008\000\
\000\000\000\000\137\000\138\000\009\000\062\000\063\000\000\000\
\010\000\011\000\012\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\045\000\015\000\016\000\000\000\
\017\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\
\019\000\041\000\000\000\000\000\020\000\021\000\003\000\004\000\
\005\000\006\000\007\000\008\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\010\000\011\000\012\000\013\000\
\000\000\046\000\000\000\000\000\000\000\000\000\014\000\000\000\
\000\000\015\000\016\000\000\000\017\000\000\000\000\000\000\000\
\018\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
\020\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\000\000\
\000\000\000\000\000\000\060\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\000\000\000\000\000\000\
\000\000\054\000\055\000\056\000\057\000\058\000\059\000\000\000\
\000\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\044\000\062\000\
\063\000\000\000\007\000\007\000\007\000\007\000\007\000\007\000\
\000\000\007\000\007\000\007\000\000\000\007\000\000\000\000\000\
\000\000\007\000\000\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\058\000\058\000\058\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\039\000\
\000\000\000\000\000\000\058\000\058\000\058\000\058\000\058\000\
\058\000\000\000\058\000\058\000\058\000\000\000\058\000\000\000\
\031\000\031\000\058\000\000\000\031\000\000\000\058\000\058\000\
\058\000\058\000\058\000\057\000\057\000\057\000\031\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\009\000\000\000\000\000\000\000\057\000\057\000\057\000\057\000\
\057\000\057\000\000\000\057\000\057\000\057\000\000\000\057\000\
\000\000\000\000\000\000\057\000\000\000\000\000\000\000\057\000\
\057\000\057\000\057\000\057\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\010\000\000\000\032\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\000\000\
\008\000\008\000\000\000\000\000\008\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\008\000\000\000\008\000\008\000\
\008\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\011\000\000\000\012\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\000\000\045\000\045\000\000\000\
\000\000\045\000\000\000\000\000\000\000\045\000\000\000\000\000\
\000\000\045\000\000\000\045\000\045\000\045\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\026\000\
\000\000\042\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\046\000\046\000\000\000\000\000\046\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\046\000\000\000\
\046\000\046\000\046\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\033\000\000\000\017\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\000\000\038\000\
\038\000\000\000\000\000\038\000\060\000\060\000\018\000\038\000\
\060\000\000\000\000\000\038\000\060\000\038\000\038\000\038\000\
\060\000\000\000\060\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\034\000\000\000\036\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\000\000\044\000\
\044\000\000\000\000\000\044\000\000\000\000\000\000\000\044\000\
\000\000\000\000\000\000\044\000\000\000\044\000\044\000\044\000\
\000\000\000\000\000\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\015\000\000\000\037\000\
\000\000\039\000\039\000\039\000\039\000\039\000\039\000\000\000\
\039\000\039\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\039\000\039\000\
\039\000\000\000\000\000\000\000\000\000\000\000\009\000\009\000\
\009\000\009\000\016\000\009\000\009\000\009\000\000\000\059\000\
\000\000\000\000\009\000\009\000\009\000\009\000\009\000\009\000\
\000\000\009\000\009\000\000\000\000\000\009\000\000\000\000\000\
\000\000\009\000\000\000\000\000\000\000\009\000\000\000\009\000\
\009\000\009\000\010\000\010\000\000\000\010\000\010\000\010\000\
\010\000\010\000\010\000\029\000\000\000\035\000\000\000\010\000\
\010\000\010\000\010\000\010\000\010\000\000\000\010\000\010\000\
\032\000\032\000\010\000\000\000\032\000\000\000\010\000\000\000\
\000\000\000\000\010\000\000\000\010\000\000\000\032\000\011\000\
\011\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\
\030\000\000\000\000\000\000\000\011\000\011\000\011\000\011\000\
\011\000\011\000\000\000\011\000\011\000\012\000\012\000\011\000\
\000\000\012\000\040\000\011\000\000\000\000\000\000\000\011\000\
\000\000\011\000\000\000\012\000\026\000\026\000\014\000\026\000\
\026\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
\000\000\026\000\026\000\026\000\026\000\026\000\026\000\000\000\
\026\000\026\000\042\000\042\000\026\000\000\000\042\000\013\000\
\026\000\000\000\000\000\000\000\026\000\000\000\026\000\000\000\
\042\000\033\000\033\000\000\000\033\000\033\000\033\000\033\000\
\033\000\033\000\000\000\000\000\000\000\000\000\033\000\033\000\
\033\000\033\000\033\000\033\000\000\000\033\000\033\000\017\000\
\017\000\033\000\028\000\017\000\000\000\033\000\000\000\000\000\
\000\000\033\000\000\000\033\000\000\000\017\000\000\000\018\000\
\018\000\034\000\034\000\018\000\034\000\034\000\034\000\034\000\
\034\000\034\000\000\000\027\000\000\000\018\000\034\000\034\000\
\034\000\034\000\034\000\034\000\000\000\034\000\034\000\036\000\
\036\000\034\000\000\000\036\000\000\000\034\000\000\000\000\000\
\000\000\034\000\019\000\034\000\000\000\036\000\000\000\025\000\
\000\000\000\000\015\000\015\000\000\000\015\000\015\000\015\000\
\015\000\015\000\015\000\000\000\000\000\000\000\000\000\015\000\
\015\000\015\000\015\000\015\000\015\000\020\000\015\000\015\000\
\037\000\037\000\015\000\000\000\037\000\000\000\015\000\000\000\
\000\000\000\000\015\000\000\000\015\000\000\000\037\000\016\000\
\016\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\
\023\000\000\000\000\000\000\000\016\000\016\000\016\000\016\000\
\016\000\016\000\000\000\016\000\016\000\000\000\000\000\016\000\
\059\000\059\000\000\000\016\000\059\000\000\000\024\000\016\000\
\059\000\016\000\000\000\000\000\059\000\000\000\059\000\000\000\
\029\000\029\000\000\000\029\000\029\000\029\000\029\000\029\000\
\029\000\000\000\000\000\000\000\021\000\029\000\029\000\029\000\
\029\000\029\000\029\000\000\000\029\000\029\000\035\000\035\000\
\029\000\000\000\035\000\000\000\029\000\000\000\000\000\000\000\
\029\000\000\000\029\000\022\000\035\000\030\000\030\000\000\000\
\030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\
\000\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\
\041\000\030\000\030\000\000\000\000\000\030\000\000\000\000\000\
\000\000\030\000\000\000\014\000\014\000\030\000\000\000\030\000\
\014\000\014\000\000\000\040\000\040\000\000\000\000\000\040\000\
\014\000\014\000\014\000\014\000\014\000\014\000\000\000\014\000\
\014\000\040\000\000\000\014\000\013\000\013\000\000\000\014\000\
\000\000\013\000\013\000\014\000\000\000\014\000\000\000\000\000\
\000\000\013\000\013\000\013\000\013\000\013\000\013\000\000\000\
\013\000\013\000\000\000\000\000\013\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\013\000\000\000\013\000\028\000\
\028\000\000\000\000\000\000\000\028\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\000\000\028\000\028\000\000\000\000\000\028\000\
\027\000\027\000\000\000\028\000\000\000\027\000\027\000\028\000\
\000\000\028\000\000\000\000\000\000\000\027\000\027\000\027\000\
\027\000\027\000\027\000\000\000\027\000\027\000\000\000\000\000\
\027\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\
\027\000\000\000\027\000\000\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\000\000\000\000\019\000\
\025\000\025\000\000\000\019\000\025\000\000\000\000\000\019\000\
\000\000\019\000\000\000\000\000\025\000\000\000\025\000\020\000\
\020\000\020\000\020\000\020\000\020\000\000\000\020\000\020\000\
\000\000\000\000\020\000\000\000\000\000\000\000\020\000\000\000\
\000\000\000\000\020\000\000\000\020\000\000\000\000\000\000\000\
\000\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\023\000\000\000\000\000\023\000\000\000\000\000\
\000\000\023\000\000\000\000\000\000\000\023\000\000\000\023\000\
\024\000\024\000\024\000\024\000\024\000\024\000\000\000\024\000\
\024\000\000\000\000\000\024\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\024\000\000\000\024\000\021\000\021\000\
\021\000\021\000\021\000\021\000\000\000\021\000\021\000\000\000\
\000\000\021\000\000\000\000\000\000\000\021\000\000\000\000\000\
\000\000\021\000\000\000\021\000\000\000\022\000\022\000\022\000\
\022\000\022\000\022\000\000\000\022\000\022\000\000\000\000\000\
\022\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\022\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\041\000\000\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\000\000\041\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\000\000\000\000\000\000\000\000\054\000\055\000\056\000\
\057\000\058\000\059\000\000\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\
\061\000\000\000\000\000\062\000\063\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\000\000\000\000\
\000\000\000\000\054\000\055\000\056\000\057\000\058\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\000\000\000\000\000\000\061\000\000\000\081\000\
\062\000\063\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\000\000\000\000\000\000\000\000\054\000\
\055\000\056\000\057\000\058\000\059\000\000\000\000\000\118\000\
\000\000\000\000\000\000\000\000\000\000\000\000\060\000\000\000\
\000\000\000\000\061\000\000\000\000\000\062\000\063\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\000\000\000\000\000\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\000\000\000\000\000\000\000\000\000\000\119\000\
\000\000\000\000\000\000\060\000\000\000\000\000\000\000\061\000\
\000\000\000\000\062\000\063\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\000\000\000\000\000\000\
\000\000\054\000\055\000\056\000\057\000\058\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\000\000\000\000\000\000\061\000\000\000\128\000\062\000\
\063\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\000\000\000\000\000\000\000\000\054\000\055\000\
\056\000\057\000\058\000\059\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\000\000\000\000\000\
\000\000\061\000\000\000\134\000\062\000\063\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\000\000\
\000\000\000\000\000\000\054\000\055\000\056\000\057\000\058\000\
\059\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\
\000\000\000\000\060\000\000\000\000\000\000\000\061\000\000\000\
\000\000\062\000\063\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\000\000\000\000\000\000\000\000\
\054\000\055\000\056\000\057\000\058\000\059\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\000\000\000\000\000\000\061\000\000\000\000\000\062\000\063\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\000\000\000\000\000\000\000\000\054\000\055\000\056\000\
\057\000\058\000\059\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\
\116\000\000\000\000\000\062\000\063\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\000\000\000\000\
\000\000\000\000\054\000\055\000\056\000\057\000\058\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\063\000"

let yycheck = "\037\000\
\000\000\001\001\002\001\003\001\001\000\001\001\002\001\003\001\
\027\001\027\001\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\014\000\027\001\038\001\038\001\001\000\019\000\032\001\
\018\001\033\001\033\001\027\001\031\001\038\001\033\001\027\001\
\039\001\031\001\007\001\035\001\027\001\027\001\038\001\035\001\
\078\000\000\000\038\001\035\001\033\001\038\001\027\001\000\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\029\001\062\000\063\000\040\001\041\001\033\001\067\000\068\000\
\069\000\033\001\112\000\001\001\002\001\003\001\018\001\038\001\
\077\000\018\000\000\000\020\000\021\000\027\001\023\000\018\001\
\027\001\039\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\036\001\000\000\027\001\031\001\040\000\
\101\000\018\001\033\001\029\001\007\001\008\001\009\001\108\000\
\038\001\012\001\013\001\036\000\106\000\255\255\115\000\000\000\
\255\255\118\000\119\000\255\255\121\000\040\001\041\001\255\255\
\125\000\066\000\000\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\135\000\136\000\010\001\040\001\041\001\255\255\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\000\000\027\001\028\001\255\255\
\030\001\255\255\255\255\255\255\034\001\255\255\255\255\255\255\
\038\001\039\001\255\255\255\255\042\001\043\001\000\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\010\001\255\255\255\255\255\255\014\001\015\001\016\001\017\001\
\255\255\000\000\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\027\001\028\001\255\255\030\001\255\255\255\255\255\255\
\034\001\255\255\255\255\255\255\038\001\255\255\255\255\255\255\
\042\001\043\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\000\000\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\000\000\040\001\
\041\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\027\001\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\035\001\255\255\037\001\038\001\039\001\
\040\001\041\001\001\001\002\001\003\001\255\255\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\000\000\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\027\001\255\255\029\001\255\255\
\025\001\026\001\033\001\255\255\029\001\255\255\037\001\038\001\
\039\001\040\001\041\001\001\001\002\001\003\001\039\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\000\000\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\027\001\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\000\000\255\255\000\000\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\000\000\255\255\000\000\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\040\001\041\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\000\000\
\255\255\000\000\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\255\255\255\255\255\255\037\001\255\255\
\039\001\040\001\041\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\000\000\255\255\000\000\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\029\001\025\001\026\001\000\000\033\001\
\029\001\255\255\255\255\037\001\033\001\039\001\040\001\041\001\
\037\001\255\255\039\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\000\000\255\255\000\000\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\255\255\255\255\037\001\255\255\039\001\040\001\041\001\
\255\255\255\255\255\255\255\255\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\000\000\255\255\000\000\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\000\000\011\001\012\001\013\001\255\255\000\000\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\040\001\041\001\005\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\000\000\255\255\000\000\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\025\001\026\001\029\001\255\255\029\001\255\255\033\001\255\255\
\255\255\255\255\037\001\255\255\039\001\255\255\039\001\005\001\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\000\000\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\025\001\026\001\029\001\
\255\255\029\001\000\000\033\001\255\255\255\255\255\255\037\001\
\255\255\039\001\255\255\039\001\005\001\006\001\000\000\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\025\001\026\001\029\001\255\255\029\001\000\000\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\255\255\
\039\001\005\001\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\025\001\
\026\001\029\001\000\000\029\001\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\255\255\039\001\255\255\025\001\
\026\001\005\001\006\001\029\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\000\000\255\255\039\001\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\025\001\
\026\001\029\001\255\255\029\001\255\255\033\001\255\255\255\255\
\255\255\037\001\000\000\039\001\255\255\039\001\255\255\000\000\
\255\255\255\255\005\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\000\000\025\001\026\001\
\025\001\026\001\029\001\255\255\029\001\255\255\033\001\255\255\
\255\255\255\255\037\001\255\255\039\001\255\255\039\001\005\001\
\006\001\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\000\000\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\255\255\029\001\
\025\001\026\001\255\255\033\001\029\001\255\255\000\000\037\001\
\033\001\039\001\255\255\255\255\037\001\255\255\039\001\255\255\
\005\001\006\001\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\000\000\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\025\001\026\001\
\029\001\255\255\029\001\255\255\033\001\255\255\255\255\255\255\
\037\001\255\255\039\001\000\000\039\001\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\000\000\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\005\001\006\001\037\001\255\255\039\001\
\010\001\011\001\255\255\025\001\026\001\255\255\255\255\029\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\039\001\255\255\029\001\005\001\006\001\255\255\033\001\
\255\255\010\001\011\001\037\001\255\255\039\001\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\005\001\
\006\001\255\255\255\255\255\255\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\255\255\029\001\
\005\001\006\001\255\255\033\001\255\255\010\001\011\001\037\001\
\255\255\039\001\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\037\001\255\255\039\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\255\255\029\001\
\025\001\026\001\255\255\033\001\029\001\255\255\255\255\037\001\
\255\255\039\001\255\255\255\255\037\001\255\255\039\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\026\001\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\255\255\255\255\037\001\255\255\039\001\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\255\255\255\255\037\001\255\255\039\001\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\255\255\
\029\001\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\037\001\255\255\039\001\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\037\001\255\255\039\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\037\001\255\255\039\001\
\040\001\041\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\255\255\
\255\255\255\255\037\001\255\255\255\255\040\001\041\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\040\001\041\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\255\255\255\255\
\255\255\037\001\255\255\039\001\040\001\041\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\255\255\255\255\255\255\037\001\255\255\
\255\255\040\001\041\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\040\001\041\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\041\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  ADHOC\000\
  AST\000\
  SLASH\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  FLOOR\000\
  SQRT\000\
  FTOI\000\
  ITOF\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  FUN\000\
  ARROW\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  SFTL\000\
  SFTR\000\
  READINT\000\
  READFLOAT\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 82 "parser.mly"
    ( _2 )
# 672 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
    ( Unit (getpos ()) )
# 678 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 86 "parser.mly"
    ( Bool(_1, getpos ()) )
# 685 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 88 "parser.mly"
    ( Int(_1, getpos ()) )
# 692 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 90 "parser.mly"
    ( Float(_1, getpos ()) )
# 699 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 92 "parser.mly"
    ( Var(_1, getpos ()) )
# 706 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 94 "parser.mly"
    ( Get(_1, _4) )
# 714 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 98 "parser.mly"
    ( _1 )
# 721 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
 ( _1 )
# 728 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 103 "parser.mly"
    ( Not(_2) )
# 735 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
    ( match _2 with
    | Float(f, p) -> Float(-.f, p) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 744 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
 ( AdHoc(_1, _3) )
# 752 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( Add(_1, _3) )
# 760 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( Sub(_1, _3) )
# 768 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
 ( Mul(_1, _3) )
# 776 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
 ( Div(_1, _3) )
# 784 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 120 "parser.mly"
 ( ShiftIL(_1, _3) )
# 792 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 122 "parser.mly"
 ( ShiftIR(_1, _3) )
# 800 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 124 "parser.mly"
    ( Eq(_1, _3) )
# 808 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 816 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
    ( Not(LE(_3, _1)) )
# 824 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    ( Not(LE(_1, _3)) )
# 832 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 132 "parser.mly"
    ( LE(_1, _3) )
# 840 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 134 "parser.mly"
    ( LE(_3, _1) )
# 848 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 137 "parser.mly"
    ( If(_2, _4, _6) )
# 857 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 140 "parser.mly"
    ( FNeg(_2) )
# 864 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 142 "parser.mly"
    ( FAdd(_1, _3) )
# 872 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 144 "parser.mly"
    ( FSub(_1, _3) )
# 880 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 146 "parser.mly"
    ( FMul(_1, _3) )
# 888 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 148 "parser.mly"
    ( FDiv(_1, _3) )
# 896 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 150 "parser.mly"
 ( Floor(_2) )
# 903 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 152 "parser.mly"
 ( Sqrt(_2) )
# 910 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 154 "parser.mly"
 ( FtoI(_2) )
# 917 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 156 "parser.mly"
 ( ItoF(_2) )
# 924 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 159 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 933 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'funargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 162 "parser.mly"
 ( Fun(_2, _4, getpos ()) )
# 941 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 165 "parser.mly"
    ( LetRec(_3, _5) )
# 949 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 168 "parser.mly"
    ( App(_1, _2) )
# 957 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 171 "parser.mly"
    ( Tuple(_1) )
# 964 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 173 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 973 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 175 "parser.mly"
    ( Put(_1, _4, _7) )
# 982 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 177 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 990 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 179 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 998 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 182 "parser.mly"
    ( Array(_2, _3) )
# 1006 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 184 "parser.mly"
 ( Read_I _2 )
# 1013 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 186 "parser.mly"
 ( Read_F _2 )
# 1020 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near line %d-%d characters %d-%d"
		   ((Parsing.symbol_start_pos ()).Lexing.pos_lnum)
		   ((Parsing.symbol_end_pos ()).Lexing.pos_lnum)
           ((Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol)
           ((Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol)) )
# 1031 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 197 "parser.mly"
    ( { name = (addtyp _1, getpos ()); args = _2; body = _4 } )
# 1040 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 201 "parser.mly"
    ( addtyp _1 :: _2 )
# 1048 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 203 "parser.mly"
    ( [addtyp _1] )
# 1055 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'argtuple) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'argtuple) in
    Obj.repr(
# 207 "parser.mly"
 ( _2 @ _4 )
# 1063 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argtuple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 209 "parser.mly"
 ( _1 @ _3 )
# 1071 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 211 "parser.mly"
 ( [addtyp _1] )
# 1078 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 215 "parser.mly"
 ( _1 )
# 1085 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funargs) in
    Obj.repr(
# 217 "parser.mly"
 ( addtyp _1 :: _2 )
# 1093 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 219 "parser.mly"
 ( [addtyp _1] )
# 1100 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 224 "parser.mly"
    ( _1 @ [_2] )
# 1108 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 227 "parser.mly"
    ( [_1] )
# 1115 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 231 "parser.mly"
    ( _1 @ [_3] )
# 1123 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 233 "parser.mly"
    ( [_1; _3] )
# 1131 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 237 "parser.mly"
    ( _1 @ [addtyp _3] )
# 1139 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 239 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 1147 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
